import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class MinimalTriangle
{
	public double maximalArea(int length)
	{
		    return 0;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, double p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		MinimalTriangle obj;
		double answer;
		obj = new MinimalTriangle();
		long startTime = System.currentTimeMillis();
		answer = obj.maximalArea(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == answer && Math.abs(p1 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p1));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		double p1;
		
		// ----- test 0 -----
		p0 = 5;
		p1 = 10.825317547305485D;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 10;
		p1 = 43.30127018922194D;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 100000;
		p1 = 4.330127018922194E9D;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// You are given a int length.
	// We have a regular hexagon: a polygon with six sides, in which all internal angles have 120 degrees and length is the length of each side.
	// We are going to draw three non-intersecting diagonals in some way.
	// These will divide the hexagon into four triangles.
	// We will then compute their areas, take a piece of paper and write down the smallest of those four areas.
	// Compute and return the largest number we can obtain on our piece of paper (by choosing which diagonals to draw).
	// 
	// DEFINITION
	// Class:MinimalTriangle
	// Method:maximalArea
	// Parameters:int
	// Returns:double
	// Method signature:double maximalArea(int length)
	// 
	// 
	// NOTES
	// -Your return value must have a relative or an absolute error of less than 1e-9.
	// 
	// 
	// CONSTRAINTS
	// -length will be between 1 and 1,000,000 (10^6), inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 5
	// 
	// Returns: 10.825317547305485
	// 
	// 
	// 
	// 1)
	// 10
	// 
	// Returns: 43.30127018922194
	// 
	// 
	// 
	// 2)
	// 100000
	// 
	// Returns: 4.330127018922194E9
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
