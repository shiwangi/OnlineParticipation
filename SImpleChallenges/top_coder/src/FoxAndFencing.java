import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class FoxAndFencing
{
	public String WhoCanWin(int mov1, int mov2, int rng1, int rng2, int d)
	{
        if(d<=mov1+rng1)
            return "Ciel";
        else if (d + mov1 <= mov2 + rng2)
            return "Liss";
            else if ((mov2 > mov1) && (mov1 * 2 + rng1 < mov2 + rng2) )
                return "Liss";
        else if ( (mov1 > mov2) && (mov2 * 2 + rng2 < mov1 + rng1))
                return "Ciel";
        else
                return "Draw";

        }

	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, boolean hasAnswer, String p5) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3 + "," + p4);
		System.out.println("]");
		FoxAndFencing obj;
		String answer;
		obj = new FoxAndFencing();
		long startTime = System.currentTimeMillis();
		answer = obj.WhoCanWin(p0, p1, p2, p3, p4);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p5 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p5);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		int p4;
		String p5;
		
		// ----- test 0 -----
		p0 = 1;
		p1 = 58;
		p2 = 1;
		p3 = 58;
		p4 = 2;
		p5 = "Ciel";
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 2;
		p1 = 1;
		p2 = 1;
		p3 = 100;
		p4 = 50;
		p5 = "Liss";
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 2;
		p1 = 1;
		p2 = 1;
		p3 = 100;
		p4 = 150;
		p5 = "Draw";
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 100;
		p1 = 100;
		p2 = 100;
		p3 = 100;
		p4 = 100000000;
		p5 = "Draw";
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 100;
		p1 = 1;
		p2 = 100;
		p3 = 1;
		p4 = 100000000;
		p5 = "Ciel";
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 100;
		p1 = 1;
		p2 = 100;
		p3 = 250;
		p4 = 100000000;
		p5 = "Draw";
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = 100;
		p1 = 1;
		p2 = 100;
		p3 = 150;
		p4 = 100000000;
		p5 = "Ciel";
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 7 -----
		p0 = 100;
		p1 = 50;
		p2 = 100;
		p3 = 1;
		p4 = 100000000;
		p5 = "Ciel";
		all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 8 -----
		p0 = 100;
		p1 = 150;
		p2 = 100;
		p3 = 1;
		p4 = 100000000;
		p5 = "Draw";
		all_right = KawigiEdit_RunTest(8, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Fox Ciel is playing a board game with her friend Squirrel Liss.
	// The game is played on an infinite strip of paper.
	// The strip of paper is divided into consecutive cells.
	// Each cell has an integer coordinate.
	// Formally, for each integer i, the left neighbor of cell i is cell (i-1) and the right neighbor of cell i is cell (i+1).
	// 
	// 
	// 
	// Each of the players has a single token called the fencer.
	// At the beginning of the game, Ciel's fencer is in cell 0 and Liss's fencer is in cell d.
	// Each of the fencers has two limits: its maximum move length and its hitting range.
	// For Ciel's fencer the maximum move length is mov1 and the hitting range is rng1.
	// Similarly, for Liss's fencer we have the parameters mov2 and rng2.
	// Note that the parameters of Liss's fencer may differ from the ones of Ciel's fencer.
	// 
	// 
	// 
	// The players take alternating turns.
	// Ciel goes first.
	// In each turn the current player starts by moving her fencer.
	// The distance between the original cell and the destination cell must be at most equal to the fencer's maximum move length.
	// (It is also allowed to leave the fencer in the same cell.)
	// Then, the current player checks whether the other fencer lies within the hitting range - that is, whether the current distance between the fencers is at most equal to the current fencer's hitting range.
	// If that is the case, the game ends and the current player wins.
	// 
	// 
	// 
	// You are given the ints mov1, mov2, rng1, rng2, and d.
	// Return "Ciel" (quotes for clarity) if Fox Ciel has a winning strategy, "Liss" if Squirrel Liss has a winning strategy, and "Draw" otherwise.
	// 
	// DEFINITION
	// Class:FoxAndFencing
	// Method:WhoCanWin
	// Parameters:int, int, int, int, int
	// Returns:String
	// Method signature:String WhoCanWin(int mov1, int mov2, int rng1, int rng2, int d)
	// 
	// 
	// CONSTRAINTS
	// -mov1 will be between 1 and 100,000,000, inclusive.
	// -mov2 will be between 1 and 100,000,000, inclusive.
	// -rng1 will be between 1 and 100,000,000, inclusive.
	// -rng2 will be between 1 and 100,000,000, inclusive.
	// -d will be between 1 and 100,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 1
	// 58
	// 1
	// 58
	// 2
	// 
	// Returns: "Ciel"
	// 
	// The attributes of Ciel's fencer are much smaller than the attributes of Liss's fencer.
	// Luckily for Ciel, she can win the game in her first turn:
	// she should move her fencer to cell 1 and from there she can hit the other fencer.
	// 
	// 1)
	// 2
	// 1
	// 1
	// 100
	// 50
	// 
	// Returns: "Liss"
	// 
	// Ciel cannot score a hit in the first turn.
	// After Ciel's turn, her fencer will be on one of the cells {-2,-1,0,1,2}.
	// Regardless of its precise location, Liss can always move her fencer one cell to the left and then hit Ciel.
	// 
	// 2)
	// 2
	// 1
	// 1
	// 100
	// 150
	// 
	// Returns: "Draw"
	// 
	// Clearly, Ciel has no chance of winning this game.
	// However, this time the initial distance d is big enough for Ciel to escape.
	// 
	// 3)
	// 100
	// 100
	// 100
	// 100
	// 100000000
	// 
	// Returns: "Draw"
	// 
	// 
	// 
	// 4)
	// 100
	// 1
	// 100
	// 1
	// 100000000
	// 
	// Returns: "Ciel"
	// 
	// 
	// 
	// 5)
	// 100
	// 1
	// 100
	// 250
	// 100000000
	// 
	// Returns: "Draw"
	// 
	// 
	// 
	// 6)
	// 100
	// 1
	// 100
	// 150
	// 100000000
	// 
	// Returns: "Ciel"
	// 
	// 
	// 
	// 7)
	// 100
	// 50
	// 100
	// 1
	// 100000000
	// 
	// Returns: "Ciel"
	// 
	// 
	// 
	// 8)
	// 100
	// 150
	// 100
	// 1
	// 100000000
	// 
	// Returns: "Draw"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
