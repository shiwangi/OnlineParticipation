import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ChessMetric
{

    class Points implements Comparable<Points>{
        int row;
        int col;
        int moves;
        Points(int a,int b,int c)
        {
            row=a;col=b;moves=c;
        }

        @Override
        public int compareTo(Points o) {
            return (this.moves-o.moves)     ;
            //return 1;  //To change body of implemented methods use File | Settings | File Templates.
        }
    }
    class P implements Comparator<P>{
        int x;int y;
        P(int a, int b){
            x=a;y=b;
        }



        @Override
        public int compare(P o1, P o2) {
            //System.out.println("haha");
            return (o1.x-o2.x)*(o1.y-o2.y);  //To change body of implemented methods use File | Settings | File Templates.
        }
    }
	public long howMany(int size, int[] start, int[] end, int numMoves)
	{
        long ans=0;
        int []dx={0,0,1,1,1,-1,-1,-1,2,-2,2,-2,1,-1,1,-1};
        int []dy={1,-1,0,1,-1,0,1,-1,1,1,-1,-1,2,2,-2,-2};
        PriorityQueue<Points> q=new PriorityQueue<Points>();
        Hashtable<P, Integer> h=new Hashtable<P, Integer>();
        int [][]visited=new int[size][size];
                      for(int j=0;j<size;j++)
                      {
                          for(int k=0;k<size;k++)
                          {
                              visited[j][k]=-1;
                          }
                      }
        q.add(new Points(start[0],start[1],0)) ;
      //  h.put(new Points(start[0],start[1],0),0);
        int moves;
        while(!q.isEmpty()){
            Points out=q.poll();
            start[0]=out.row;
            start[1]=out.col;
            //System.out.println("polll "+out.row+ "  "+out.col);
            moves=out.moves;

            if(visited[start[0]][start[1]]>=0){
              //


                int x=visited[start[0]][start[1]];
                     if(start[0]==end[0] && start[1]==end[1] && ((moves==numMoves)|| ((numMoves-moves)%(moves-x)==0)) )
                         ans++;
                    continue;

            }
            if(start[0]==end[0] && start[1]==end[1] && moves==numMoves)
              ans++;
            visited[start[0]][start[1]]=moves;


            if(moves+1<=numMoves)
            {
                for(int i=0;i<16;i++)
                {
                  if(start[0] + dx[i]>=0 && start[0] + dx[i]<size && start[1] + dy[i]>=0 &&start[1] + dy[i]<size )
                     {
              //           System.out.println((start[0] +", "+ dx[i])+" ,"+( start[1]  +", "+ dy[i])+" , " +(moves + 1));
                         q.add(new Points(start[0] + dx[i], start[1] + dy[i], moves + 1)) ;
                     }
                }
            }

        }

		return ans;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, int[] p2, int p3, boolean hasAnswer, long p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}" + "," + p3);
		System.out.println("]");
		ChessMetric obj;
		long answer;
		obj = new ChessMetric();
		long startTime = System.currentTimeMillis();
		answer = obj.howMany(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p4);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p4;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int[] p1;
		int[] p2;
		int p3;
		long p4;
        // ----- test 3 -----
        p0 = 3;
        p1 = new int[]{0,0};
        p2 = new int[]{0,0};
        p3 = 2;
        p4 = 5L;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 0 -----
		p0 = 3;
		p1 = new int[]{0,0};
		p2 = new int[]{1,0};
		p3 = 1;
		p4 = 1L;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = new int[]{0,0};
		p2 = new int[]{1,2};
		p3 = 1;
		p4 = 1L;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 3;
		p1 = new int[]{0,0};
		p2 = new int[]{2,2};
		p3 = 1;
		p4 = 0L;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------


		// ----- test 4 -----
		p0 = 100;
		p1 = new int[]{0,0};
		p2 = new int[]{0,99};
		p3 = 50;
		p4 = 243097320072600L;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Suppose you had an n by n chess board and a super piece called a kingknight.  Using only one move the kingknight denoted 'K' below can reach any of the spaces denoted 'X' or 'L' below:
	//    .......
	//    ..L.L..
	//    .LXXXL.
	//    ..XKX..
	//    .LXXXL.
	//    ..L.L..
	//    .......
	// 
	// In other words, the kingknight can move either one space in any direction (vertical, horizontal or diagonally) or can make an 'L' shaped move.  An 'L' shaped move involves moving 2 spaces horizontally then 1 space vertically or 2 spaces vertically then 1 space horizontally.  In the drawing above, the 'L' shaped moves are marked with 'L's whereas the one space moves are marked with 'X's.  In addition, a kingknight may never jump off the board.
	// 
	// Given the size of the board, the start position of the kingknight and the end position of the kingknight, your method will return how many possible ways there are of getting from start to end in exactly numMoves moves.  start and finish are int[]s each containing 2 elements.  The first element will be the (0-based) row position and the second will be the (0-based) column position.  Rows and columns will increment down and to the right respectively.  The board itself will have rows and columns ranging from 0 to size-1 inclusive.  
	// 
	// Note, two ways of getting from start to end are distinct if their respective move sequences differ in any way.  In addition, you are allowed to use spaces on the board (including start and finish) repeatedly during a particular path from start to finish.  We will ensure that the total number of paths is less than or equal to 2^63-1 (the upper bound for a long).
	// 
	// DEFINITION
	// Class:ChessMetric
	// Method:howMany
	// Parameters:int, int[], int[], int
	// Returns:long
	// Method signature:long howMany(int size, int[] start, int[] end, int numMoves)
	// 
	// 
	// NOTES
	// -For C++ users: long long is a 64 bit datatype and is specific to the GCC compiler.
	// 
	// 
	// CONSTRAINTS
	// -size will be between 3 and 100 inclusive
	// -start will contain exactly 2 elements
	// -finish will contain exactly 2 elements
	// -Each element of start and finish will be between 1 and size-1 inclusive
	// -numMoves will be between 1 and 50 inclusive
	// -The total number of paths will be at most 2^63-1.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 3
	// {0,0}
	// {1,0}
	// 1
	// 
	// Returns: 1
	// 
	// Only 1 way to get to an adjacent square in 1 move
	// 
	// 1)
	// 3
	// {0,0}
	// {1,2}
	// 1
	// 
	// Returns: 1
	// 
	// A single L-shaped move is the only way
	// 
	// 2)
	// 3
	// {0,0}
	// {2,2}
	// 1
	// 
	// Returns: 0
	// 
	// Too far for a single move
	// 
	// 3)
	// 3
	// {0,0}
	// {0,0}
	// 2
	// 
	// Returns: 5
	// 
	// Must count all the ways of leaving and then returning to the corner
	// 
	// 4)
	// 100
	// {0,0}
	// {0,99}
	// 50
	// 
	// Returns: 243097320072600
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
