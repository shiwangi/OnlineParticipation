import java.util.ArrayList;


public class YearProgressbar
{
	public double percentage(String currentDate)
	{
		ArrayList<String> month=new ArrayList<String>();
        month.add("January");month.add("February");month.add("March");month.add("April");month.add("May");
        month.add("June");month.add("July");month.add("August");month.add("September");month.add("October");
        month.add("November");month.add("December");
                String tokens[]=currentDate.split(" ");
        String mon=tokens[0];    double passed=0;
        String token[]=tokens[1].split(",");
        int day=Integer.parseInt(token[0]);
        int year=Integer.parseInt(tokens[2]);
        String tok[]=tokens[3].split(":");
        int hour=Integer.parseInt(tok[0]);
        int min=Integer.parseInt(tok[1]);
        int m=month.indexOf(mon);
        int[] days;
        if(isleapyear(year)==0)
        days= new int[]{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        else
            days= new int[]{31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

        for(int i=0;i<m;i++)
            passed+=days[i];
        passed+=day-1 +(double)hour/(double)24+(double)min/(double)(60*24) ;
        return (double)passed/(double)numofdays(year)*100;
	}
	     int isleapyear(int year)
         {
             if((year%400==0)|| (year%4==0 && year%100!=0 ))
                 return 1;
             else
                 return 0;
         }
    int numofdays(int year)
    {
        if(isleapyear(year)==0)
            return 31*7+30*4+28;
        else
            return 31*7+30*4+29;
    }
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, double p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		YearProgressbar obj;
		double answer;
		obj = new YearProgressbar();
		long startTime = System.currentTimeMillis();
		answer = obj.percentage(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == answer && Math.abs(p1 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p1));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		double p1;
		
		// ----- test 0 -----
		p0 = "January 01, 2008 00:00";
		p1 = 0.0D;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "December 31, 2007 23:59";
		p1 = 99.99980974124807D;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "July 02, 2007 12:00";
		p1 = 50.0D;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "July 02, 2008 00:00";
		p1 = 50.0D;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "May 10, 1981 00:31";
		p1 = 35.348363774733635D;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = "January 31, 1900 00:47";
		p1 = 8.228120243531203D;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// You are a big fan of New Year's Eve parties. The next one is not too far away, and you are already looking forward to it.
	// 
	// 
	// 
	// Then, one day, you wake up with a question: "Wait a moment, exactly how far away is it?"
	// 
	// 
	// 
	// To answer this question, you decided to implement a simple application: a year progress bar that will always show how much of the current year has already passed.
	// 
	// 
	// 
	// In this problem, your goal is to implement the most important part of this application: a function that gets a String currentDate,
	// and returns the elapsed part of the year, as a percentage.
	// 
	// 
	// 
	// The variable currentDate will be of the form "Month DD, YYYY HH:MM" (quotes for clarity).
	// Here, "Month" is the name of the current month, "YYYY" is a four-digit number representing the current year,
	// and "DD", "HH", and "MM" are two-digit numbers (possibly with a leading zero)
	// that represent the current day, hour and minute.
	// 
	// 
	// DEFINITION
	// Class:YearProgressbar
	// Method:percentage
	// Parameters:String
	// Returns:double
	// Method signature:double percentage(String currentDate)
	// 
	// 
	// NOTES
	// -The months of a normal year have 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, and 31 days. 
	// -In leap years, the second month (February) has 29 days.
	// -A year is a leap year if (it is divisible by 400) or (it is divisible by 4, but not by 100).
	// -Ignore location-dependent changes to time flow such as daylight saving time.
	// -Your return value must have a relative or absolute error less than 1e-9.
	// 
	// 
	// CONSTRAINTS
	// -currentDate will be of the form given in the problem statement.
	// -Month will be one of January, February, March, April, May, June, July, August, September, October, November, and December.
	// -YYYY will be between 1800 and 2600, inclusive.
	// -DD will be between 01 and the number of days in the given month (in the given year), inclusive.
	// -HH will be between 00 and 23, inclusive.
	// -MM will be between 00 and 59, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "January 01, 2008 00:00"
	// 
	// Returns: 0.0
	// 
	// This is the exact beginning of the year 2008; no time has elapsed yet.
	// 
	// 1)
	// "December 31, 2007 23:59"
	// 
	// Returns: 99.99980974124807
	// 
	// One last minute of the year 2007 is remaining.
	// 
	// 2)
	// "July 02, 2007 12:00"
	// 
	// Returns: 50.0
	// 
	// The exact half of a normal year is at noon on the second day of July.
	// 
	// 3)
	// "July 02, 2008 00:00"
	// 
	// Returns: 50.0
	// 
	// On a leap year, the exact half of the year is the midnight between the first and the second of July.
	// 
	// 4)
	// "May 10, 1981 00:31"
	// 
	// Returns: 35.348363774733635
	// 
	// The date and time when the problem setter was born :-)
	// 
	// 5)
	// "January 31, 1900 00:47"
	// 
	// Returns: 8.228120243531203
	// 
	// Note that 1900 is not a leap year.
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
