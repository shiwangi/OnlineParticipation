public class SpiralNumbers
{
	public String getPosition(int N)
	{
		return "";
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		SpiralNumbers obj;
		String answer;
		obj = new SpiralNumbers();
		long startTime = System.currentTimeMillis();
		answer = obj.getPosition(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		String p1;
		
		// ----- test 0 -----
		p0 = 2;
		p1 = "(0,1)";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = "(1,1)";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 7;
		p1 = "(-1,-1)";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 17;
		p1 = "(2,-2)";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 24;
		p1 = "(-2,1)";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 830;
		p1 = "(-14,3)";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = 765409;
		p1 = "(-437,221)";
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	//      Consider all positive integers written in the following manner (you can 
	//      imagine an infinite spiral).
	//      
	//                  21  22  23  24  25  26
	//                  20   7   8   9  10 ...
	//                  19   6   1   2  11 ...
	//                  18   5   4   3  12 ...
	//                  17  16  15  14  13 ...
	//      
	//      You task is to determine the position (row,column) of a given number 
	//      N, assuming that the center (number 1) has position (0,0). Rows are numbered from top to bottom, columns are numbered from left to right (for example, number 3 is at (1,1)). Your method should return a string containing the position of N in form (R,C) where R is the row and C is the column. R and C must not contain any leading zeroes.
	// 
	// 
	// DEFINITION
	// Class:SpiralNumbers
	// Method:getPosition
	// Parameters:int
	// Returns:String
	// Method signature:String getPosition(int N)
	// 
	// 
	// CONSTRAINTS
	// -  N will be between 1 and 2,147,483,647, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 2
	// 
	// Returns: "(0,1)"
	// 
	// 1)
	// 3
	// 
	// Returns: "(1,1)"
	// 
	// 2)
	// 7
	// 
	// Returns: "(-1,-1)"
	// 
	// 3)
	// 17
	// 
	// Returns: "(2,-2)"
	// 
	// 4)
	// 24
	// 
	// Returns: "(-2,1)"
	// 
	// 5)
	// 830
	// 
	// Returns: "(-14,3)"
	// 
	// 6)
	// 765409
	// 
	// Returns: "(-437,221)"
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
