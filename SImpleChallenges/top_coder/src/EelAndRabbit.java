public class EelAndRabbit
{
    EelAndRabbit ss=new EelAndRabbit();
	public int getmax(int[] l, int[] t)
	{
        sort(t,l,0,l.length-1);  int res=0;
        for(int i=0;i<l.length;i++)
        {
            System.out.println(l[i]);
        }
       /* int[] coinci=new int[l.length];
        for(int i=0;i<l.length-1;i++)
        {
            for(int j=0;j<i;j++)
            {
               if(t[j]+l[j]<t[i+1])
                   coinci[i]++;
            }
        }
        int max=0;int key=0;
        for(int i=0;i<coinci.length;i++)
        {
           if(coinci[i]>max) {
               max=coinci[i];
               key=i;
           }
        }
        res+=max;
         max=0;
        for(int i=0;i<coinci.length;i++)
        {
            if(coinci[i]>max && i!=key) {
                max=coinci[i];
            }
        }
        res+=max; */

        return res;
	}
    int sort(int[] a,int []lo,int start, int end) {
        if (start<=end)
            return 0;
        int mid = (start + end) / 2;
        sort(a,lo, start, mid);
        sort(a,lo, mid + 1, end);
        merge(a,lo, start, mid, end);
        return 0;
    }

    void merge(int[] a, int[] lo, int beg, int mid, int end) {
        int i = beg;
        int j = mid + 1;
        int[] arr = new int[end + 1];
        int[] arr2 = new int[end + 1];
        int c = 0;
        while (i != mid || j != end) {
            if (i <= mid && j <= end) {
                if (a[i] < a[j]) {
                    arr[c] = a[i];
                    arr2[c] = lo[i];
                    i++;
                    c++;
                } else {
                    arr[c] = a[j];
                    arr2[c] = lo[j];
                    c++;
                    j++;
                }
            } else if (i <= mid) {
                arr[c] = a[i];
                arr2[c] = lo[i];
                i++;
                c++;
            } else if (j <= end) {
                arr[c] = a[j];
                arr2[c] = lo[j];
                c++;
                j++;
            }
        }
        for (i = 0; i <= end; i++) {
            System.out.println(arr[i]);
            a[i] = arr[i];
            a[i] = arr2[i];
           // r[i] = arr3[i];
        }
    }

    // BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		EelAndRabbit obj;
		int answer;
		obj = new EelAndRabbit();
		long startTime = System.currentTimeMillis();
		answer = obj.getmax(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new int[]{2,4,3,2,2,1,10};
		p1 = new int[]{2,6,3,7,0,2,0};
		p2 = 6;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,1,1};
		p1 = new int[]{2,0,4};
		p2 = 2;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1};
		p1 = new int[]{1};
		p2 = 1;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{8,2,1,10,8,6,3,1,2,5};
		p1 = new int[]{17,27,26,11,1,27,23,12,11,13};
		p2 = 7;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Rabbit went to a river to catch eels.
	// All eels are currently swimming down the stream at the same speed.
	// Rabbit is standing by the river, downstream from all the eels.
	// 
	// 
	// Each point on the river has a coordinate.
	// The coordinates increase as we go down the stream.
	// Initially, Rabbit is standing at the origin, and all eels have non-positive coordinates.
	// 
	// 
	// You are given two int[]s: l and t.
	// These describe the current configuration of eels.
	// The speed of each eel is 1 (one).
	// For each i, the length of eel number i is l[i].
	// The head of eel number i will arrive at the coordinate 0 precisely at the time t[i].
	// Therefore, at any time T the eel number i has its head at the coordinate T-t[i], and its tail at the coordinate T-t[i]-l[i].
	// 
	// 
	// Rabbit may only catch an eel when some part of the eel (between head and tail, inclusive) is at the same coordinate as the rabbit.
	// Rabbit can catch eels at most twice.
	// Each time he decides to catch eels, he may catch as many of the currently available eels as he wants.
	// (That is, he can only catch eels that are in front of him at that instant, and he is allowed and able to catch multiple eels at once.)
	// 
	// 
	// Return the maximal total number of eels Rabbit can catch.
	// 
	// DEFINITION
	// Class:EelAndRabbit
	// Method:getmax
	// Parameters:int[], int[]
	// Returns:int
	// Method signature:int getmax(int[] l, int[] t)
	// 
	// 
	// CONSTRAINTS
	// -l will contain between 1 and 50 elements, inclusive.
	// -Each element of l will be between 1 and 1,000,000,000, inclusive.
	// -l and t will contain the same number of elements.
	// -Each element of t will be between 0 and 1,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {2, 4, 3, 2, 2, 1, 10}
	// {2, 6, 3, 7, 0, 2, 0}
	// 
	// Returns: 6
	// 
	// Rabbit can catch 6 eels in the following way:
	// 
	// At time 2, catch Eel 0, Eel 4, Eel 5, and Eel 6.
	// At time 8, catch Eel 1 and Eel 3.
	// 
	// 
	// 
	// 1)
	// {1, 1, 1}
	// {2, 0, 4}
	// 
	// Returns: 2
	// 
	// No two eels are in front of Rabbit at the same time, so Rabbit can catch at most two eels.
	// 
	// 2)
	// {1}
	// {1}
	// 
	// Returns: 1
	// 
	// 
	// 
	// 3)
	// {8, 2, 1, 10, 8, 6, 3, 1, 2, 5}
	// {17, 27, 26, 11, 1, 27, 23, 12, 11, 13}
	// 
	// Returns: 7
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
