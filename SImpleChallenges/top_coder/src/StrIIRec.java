public class StrIIRec
{


    private static String ans="";

    private static String permutation(String prefix, String str,String minStr,int minInv) {
        int n = str.length();

        if (n == 0){
            System.out.println(prefix);
            if(calc_inversions((minStr+str))>=minInv)
                ans= prefix;

        }
        else {
            for (int i = 0; i < n; i++)  {
                permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i+1, n),minStr,minInv);
              if(!ans.equals(""))
                  return ans;
            }
        }
        return "";
    }
   static int calc_inversions(String s)
    {
        int l=s.length(); int count=0;
        for(int i=0;i<l-1;i++)
        {
            for(int j=i+1;j<l;j++)
            {
                if(s.charAt(j)<s.charAt(i))
                    count++;
            }
        }

        System.out.println(count);
        return count;
    }
	public String recovstr(int n, int minInv, String minStr)
	{
        String str="";
        int count=n-minStr.length();int g=97;  String check="";
        while(count!=0)
        {
            if(minStr.indexOf(g)==-1)
            {
                check+=g;count--;
            }
            g++;
        }

       return permutation("",check,minStr,minInv);

	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, String p2, boolean hasAnswer, String p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + "\"" + p2 + "\"");
		System.out.println("]");
		StrIIRec obj;
		String answer;
		obj = new StrIIRec();
		long startTime = System.currentTimeMillis();
		answer = obj.recovstr(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p3 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p3);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		String p2;
		String p3;
		
		// ----- test 0 -----
        p0 = 2;
        p1 = 1;
        p2 = "ab";
        p3 = "ba";
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----

        p0 = 2;
        p1 = 1;
        p2 = "ab";
        p3 = "ba";
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 11;
		p1 = 55;
		p2 = "debgikjfc";
		p3 = "kjihgfedcba";
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 15;
		p1 = 0;
		p2 = "e";
		p3 = "eabcdfghijklmno";
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 9;
		p1 = 20;
		p2 = "fcdebiha";
		p3 = "fcdehigba";
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// For a given string S of length n an inversion is a pair of integers (i, j) such that 0 <= i < j <= n-1 and S[i] > S[j]. (That is, the character at 0-based index i is greater than the character at 0-based index j.) For example, the string "abcab" has 3 inversions: (1, 3), (2, 3), and (2, 4).
	// 
	// Given are ints n and minInv, and a String minStr.
	// We will consider all strings that are permutations of the first n lowercase English letters.
	// That is, these strings have length n and contain each of the first n letters exactly once.
	// Out of these strings, return the lexicographically smallest string R with the following two properties:
	// 
	// The number of inversions in R is at least minInv.
	// The string R is not lexicographically smaller than minStr.
	// 
	// If there is no such string, return an empty String instead.
	// 
	// 
	// DEFINITION
	// Class:StrIIRec
	// Method:recovstr
	// Parameters:int, int, String
	// Returns:String
	// Method signature:String recovstr(int n, int minInv, String minStr)
	// 
	// 
	// NOTES
	// -A String A is lexicographically smaller than a String B if A is a prefix of B or A contains a smaller character at the first position where the Strings differ.
	// 
	// 
	// CONSTRAINTS
	// -n will be between 1 and 20, inclusive.
	// -minInv will be between 0 and n*(n-1)/2, inclusive.
	// -minStr will contain between 1 and n characters, inclusive.
	// -Each character in minStr will be one of the first n lowercase Latin letters.
	// -All characters in minStr will be unique.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 2
	// 1
	// "ab"
	// 
	// Returns: "ba"
	// 
	// You must find the lexicographically smallest String that has at least 1 inversion and is not lexicographically smaller than "ab".
	// 
	// 1)
	// 9
	// 1
	// "efcdgab"
	// 
	// Returns: "efcdgabhi"
	// 
	// 2)
	// 11
	// 55
	// "debgikjfc"
	// 
	// Returns: "kjihgfedcba"
	// 
	// "kjihgfedcba" is the only String that has at least 55 inversions.
	// 
	// 3)
	// 15
	// 0
	// "e"
	// 
	// Returns: "eabcdfghijklmno"
	// 
	// 4)
	// 9
	// 20
	// "fcdebiha"
	// 
	// Returns: "fcdehigba"
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
