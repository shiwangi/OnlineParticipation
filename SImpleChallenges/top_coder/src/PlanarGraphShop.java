import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PlanarGraphShop
{
	public int bestCount(int N)
	{
		    int dp[][]=new int[38][1000];
        int max_edges;
        for(int i=1;i<38;i++)
        {
            max_edges=(i*(i-1))/2;
            for(int j=0;j<max_edges;j++)
            {
                  dp[i][j]=i*i+j*j*j;
            }
        }
        return 0;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		PlanarGraphShop obj;
		int answer;
		obj = new PlanarGraphShop();
		long startTime = System.currentTimeMillis();
		answer = obj.bestCount(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		
		// ----- test 0 -----
		p0 = 36;
		p1 = 1;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 7;
		p1 = 7;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 72;
		p1 = 2;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 46;
		p1 = 3;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// In the Kocurkovo village there is a shop that sells simple planar graphs. (See Notes for a definition.)
	// 
	// 
	// The cost of any graph with X vertices and Y edges is (X^3 + Y^2) gold coins.
	// 
	// 
	// Monika has N gold coins, and she wants to spend all of them on simple planar graphs.
	// 
	// 
	// Write a method that gets the value N and computes the minimum number of simple planar graphs Monika has to buy in order to spend exactly N gold coins.
	// She is allowed to buy multiple graphs of the same type.
	// 
	// 
	// DEFINITION
	// Class:PlanarGraphShop
	// Method:bestCount
	// Parameters:int
	// Returns:int
	// Method signature:int bestCount(int N)
	// 
	// 
	// NOTES
	// -A simple graph is an ordered pair (V,E) where V is a finite non-empty set of objects called vertices, and E is a finite set of edges. Each edge is a two-element subset of V.  (You can find drawings of several graphs in Example #3.)
	// -Note that a simple graph does not contain any loops (edges that connect a vertex to itself) and any duplicate edges. In other words, each edge connects two different vertices, and each pair of vertices is connected by at most one edge.
	// -A graph is called planar if it has a drawing in the plane such that no two edges intersect.
	// -Note that a simple planar graph does not have to be connected.
	// 
	// 
	// CONSTRAINTS
	// -N will be between 1 and 50,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 36
	// 
	// Returns: 1
	// 
	// For 36 gold coins she can buy a triangle: a simple planar graph with 3 vertices and 3 edges.
	// 
	// 1)
	// 7
	// 
	// Returns: 7
	// 
	// The only simple planar graph that costs 7 gold coins or less is the graph that consists of a single vertex (and no edges). This graph costs 1^3 + 0^2 = 1, so Monika has to buy 7 of them.
	// 
	// 2)
	// 72
	// 
	// Returns: 2
	// 
	// She can buy 2 triangles for 36 gold coins each. No simple planar graph costs exactly 72 gold coins, hence the optimal answer in this case is 2.
	// 
	// 3)
	// 46
	// 
	// Returns: 3
	// 
	// All the graphs Monika can afford are shown in the following picture:
	// 
	// 
	// 
	// One optimal solution is to buy graphs worth 1 + 9 + 36 gold coins.
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
