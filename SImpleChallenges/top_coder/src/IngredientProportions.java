import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class IngredientProportions
{
	public int[] getMasses(String[] proportions)
	{
		return new int[]{0, 0};
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		IngredientProportions obj;
		int[] answer;
		obj = new IngredientProportions();
		long startTime = System.currentTimeMillis();
		answer = obj.getMasses(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p1[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p1[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int[] p1;
		
		// ----- test 0 -----
		p0 = new String[]{"#0 and #1 as 6:4"};
		p1 = new int[]{3,2};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"#0 and #1 as 9:8","#1 and #2 as 9:8"};
		p1 = new int[]{81,72,64};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"#4 and #0 as 1:1","#4 and #1 as 3:1","#4 and #2 as 5:1","#4 and #3 as 7:1"};
		p1 = new int[]{105,35,21,15,105};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"#2 and #3 as 6:8","#0 and #1 as 9:3","#3 and #0 as 7:5"};
		p1 = new int[]{60,20,63,84};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Your friend has invented a splendid cocktail consisting of N ingredients.  However, she has forgotten the amount of each ingredient that goes into the recipe.
	// 
	// For N-1 pairs of ingredients, she remembers the proportion in which the ingredients within each pair should be added to the cocktail. Fortunately, these N-1 proportions are sufficient to restore the recipe of the entire cocktail.
	// 
	// You are given a String[] proportions containing the N-1 proportions. Each element is formatted "# and # as :<q>" (quotes for clarity), which means that the mass of ingredient  divided by the mass of ingredient  in the cocktail must be equal to /<q> (all ingredients are 0-indexed). Return a int[] containing exactly N elements, where the i-th element is the mass of ingredient i, such that all the given proportions are satisfied and the total mass is as small as possible.  The total mass must be greater than 0.
	// 
	// DEFINITION
	// Class:IngredientProportions
	// Method:getMasses
	// Parameters:String[]
	// Returns:int[]
	// Method signature:int[] getMasses(String[] proportions)
	// 
	// 
	// CONSTRAINTS
	// -proportions will contain between 1 and 9 elements, inclusive.
	// -proportions will contain exactly N-1 elements, where N is the number of ingredients in the cocktail.
	// -Each element of proportions will contain exactly 16 characters.
	// -Each element of proportions will be formatted as described in the statement.
	// -Each  will be between 0 and N-1, inclusive.
	// -Each  will be between 0 and N-1, inclusive.
	// -Each  will be between 1 and 9, inclusive.
	// -Each <q> will be between 1 and 9, inclusive.
	// -The information given in proportions will be sufficient to restore the recipe of the cocktail uniquely up to a constant factor.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {"#0 and #1 as 6:4"}
	// 
	// Returns: {3, 2 }
	// 
	// Taking 6 units of ingredient #0 and 4 units of ingredient #1 would satisfy the proportion, but it wouldn't give the smallest possible total mass. To minimize the total mass, divide the masses by 2.
	// 
	// 1)
	// {"#0 and #1 as 9:8","#1 and #2 as 9:8"}
	// 
	// 
	// Returns: {81, 72, 64 }
	// 
	// 
	// 
	// 2)
	// {"#4 and #0 as 1:1", "#4 and #1 as 3:1", "#4 and #2 as 5:1", "#4 and #3 as 7:1"}
	// 
	// Returns: {105, 35, 21, 15, 105 }
	// 
	// The mass of ingredient #4 should be divisible by 3, 5 and 7. The smallest such number is 105.
	// 
	// 3)
	// {"#2 and #3 as 6:8", "#0 and #1 as 9:3", "#3 and #0 as 7:5"}
	// 
	// Returns: {60, 20, 63, 84 }
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
