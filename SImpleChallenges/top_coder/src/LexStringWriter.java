import java.util.Arrays;


public class LexStringWriter
{
	public int minMoves(String s)
	{
		  int l=s.length();  int cur_pos=0,moves=0;
        char[] c = s.toCharArray();
        char[] chars = s.toCharArray();
        Arrays.sort(chars);
        int []pos=new int[l];
        for(int i=0;i<l;i++)
        {
            for(int j=0;j<l;j++)
            {
                  if(chars[i]==c[j]) {
                      pos[i]=j;c[j]=' ';
                      break;
                  }


            }
        }
        moves+=l;
          return 0;

	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		LexStringWriter obj;
		int answer;
		obj = new LexStringWriter();
		long startTime = System.currentTimeMillis();
		answer = obj.minMoves(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		int p1;
		
		// ----- test 0 -----
		p0 = "aaa";
		p1 = 5;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "ba";
		p1 = 4;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "abba";
		p1 = 9;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "acbbc";
		p1 = 12;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// You have a special machine called a LexStringWriter. It has a display that initially shows the String s, and the cursor's initial position is on the first letter of the string. The machine has three buttons: left, right, and enter. When you press left, the cursor moves one position to the left if possible. When you press right, it moves one position to the right if possible. The width of the display is exactly equal to the length of s, and the cursor can never leave the display. When you press enter, the letter shown at the current cursor position will be printed on paper, and that position on the display will be replaced with a space (' ').
	// 
	// 
	// Return the minimal number of button presses necessary to print all of the letters in s in alphabetically order.  All occurrences of all letters in s must be printed, so if 'a' appears 3 times, for example, 'a' must be printed 3 times.
	// 
	// 
	// 
	// DEFINITION
	// Class:LexStringWriter
	// Method:minMoves
	// Parameters:String
	// Returns:int
	// Method signature:int minMoves(String s)
	// 
	// 
	// CONSTRAINTS
	// -s will contain between 1 and 50 characters, inclusive.
	// -s will contain only lowercase letters ('a'-'z').
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "aaa"
	// 
	// Returns: 5
	// 
	// Press: enter, right, enter, right, enter. 
	// 
	// 1)
	// "ba"
	// 
	// Returns: 4
	// 
	// You should print the letter 'a' first.
	// 
	// 2)
	// "abba"
	// 
	// Returns: 9
	// 
	// 
	// 
	// 3)
	// "acbbc"
	// 
	// Returns: 12
	// 
	// Print the rightmost letter 'c' before the leftmost.
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
