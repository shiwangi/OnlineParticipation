public class ColorTheCells
{
	public int minimalTime(int[] dryingTime)
	{
		int len=dryingTime.length; int min=dryingTime[0];  int key=0;
       for(int i=0;i<len;i++)
       {
           if(dryingTime[i]<min)
           {   min  =dryingTime[i]; key=i;
           }
       }
       // System.out.print(key);
        if(len==2)
           return Math.min(1+dryingTime[1]+2,1+1+dryingTime[0]+2);
        if(key==len-2)
        {   System.out.print("h4");
            if(len==3)
                return 1+min+3;

            return 2*(key-1)+1+min-1+1+2;
        }
        if(key==len-1)
        {   System.out.print("h4");
            if(len==3)
                return 1+2+min-1+2;
            return 2*(key-1)+1+min-1+2;
        }

        int a=(min-((len-2-(key+1))+2*(len-2-(key+1))-1));
        if(a<0) {  System.out.print("h4");
        return 2*(key+1)+(len-2-(key+1))+2*(len-2-(key+1))-1+2; }
        else{System.out.print("h4");
            return 2*(key+1)+min+2;}

	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		ColorTheCells obj;
		int answer;
		obj = new ColorTheCells();
		long startTime = System.currentTimeMillis();
		answer = obj.minimalTime(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new int[]{8, 10, 8, 7};
		p1 = 12;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,2,100,1};
		p1 = 7;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{4, 3};
		p1 = 6;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{4, 7, 10, 8};
		p1 = 8;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// There are N cells in a row.
	// The cells are numbered 0 through N-1 from left to right.
	// Magical Girl Riena wants to give magical powers to all the cells by painting all of them using magic colors.
	// Riena starts at time 0 in cell 0.
	// She can do three types of actions:
	// 
	// She can wait in her current cell for as long as she wants.
	// She may move to an adjacent cell. The move takes 1 unit of time.
	// She may paint an adjacent cell. Painting the cell takes 1 unit of time. (Note that she cannot paint the cell she currently stands in, only the adjacent ones.)
	// 
	// There is one additional restriction: Riena cannot enter a freshly painted cell until the paint dries.
	// You are given a int[] dryingTime with N elements.
	// For each i, dryingTime[i] is the time needed for the paint in the cell i to dry after Riena finished painting the cell.
	// Once cell i has already been painted, Riena is not allowed to start moving to cell i before the paint in cell i gets dry.
	// 
	// For example, suppose that Riena is currently in cell 3 and we have dryingTime[2]=7.
	// At time 12 Riena starts painting the adjacent cell 2.
	// She will finish painting the cell at time 12+1 = 13.
	// The paint in the cell will be dry at time 13+7 = 20.
	// Therefore, the earliest time Riena can be in cell 2 again is 21.
	// (At time 20 she can start moving from cell 3 to cell 2, and the move takes 1 unit of time.)
	// 
	// Riena wants to paint all N cells, and she wants to finish painting as quickly as possible.
	// She may paint the cells in any order she likes.
	// Compute and return the earliest possible time when Riena can finish painting the last cell.
	// (Note that the return value you are trying to minimize is the moment when Riena finishes painting, not the moment when the paint dries.)
	// 
	// DEFINITION
	// Class:ColorTheCells
	// Method:minimalTime
	// Parameters:int[]
	// Returns:int
	// Method signature:int minimalTime(int[] dryingTime)
	// 
	// 
	// CONSTRAINTS
	// -dryingTime will contain between 2 and 7 elements, inclusive.
	// -Each element of dryingTime will be between 1 and 100,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {2, 2, 3}
	// 
	// Returns: 6
	// 
	// One of the optimal solutions:
	// 
	// At time 0, Riena starts moving from cell 0 to cell 1.
	// At time 1, she reaches cell 1 and starts painting cell 0.
	// At time 2, she finishes painting cell 0 and starts painting cell 2. The paint in cell 0 starts drying.
	// At time 3, Riena finishes painting cell 2. The paint in cell 2 starts drying. Riena now has to wait because she already painted both adjacent cells and she cannot move to either of them yet.
	// At time 4, cell 0 becomes dry and Riena starts moving from cell 1 to cell 0.
	// At time 5, Riena reaches cell 0 and starts painting cell 1.
	// At time 6, Riena finishes painting cell 1 and she is done. (Also, cell 2 is now dry and cell 1 will be dry at time 8, but we don't care about them any more.)
	// 
	// 
	// 1)
	// {1, 2, 100, 1}
	// 
	// Returns: 7
	// 
	// 
	// 
	// 2)
	// {33, 58, 21, 44}
	// 
	// Returns: 26
	// 
	// 
	// 
	// 3)
	// {35198, 26281, 72533, 91031, 44326, 43178, 85530}
	// 
	// Returns: 26287
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
