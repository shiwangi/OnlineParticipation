public class ColorCode
{
	public long getOhms(String[] code)
	{
	String[] color={"black","brown","red","orange","yellow","green","blue","violet","grey", "white"} ;double sum=0;
	for(int i=0;i<code.length;i++)
    {
      for(int j=0;j<10;j++){

          if(color[j].equals(code[i]) && i==code.length-1)
              sum=sum* Math.pow(10,j);
          else if(color[j].equals(code[i]))
              sum=sum*10+(j);
      }

    }
        return (long) sum;}
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		ColorCode obj;
		long answer;
		obj = new ColorCode();
		long startTime = System.currentTimeMillis();
		answer = obj.getOhms(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		long p1;
		
		// ----- test 0 -----
		p0 = new String[]{"yellow","violet","red"};
		p1 = 4700L;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"orange","red","blue"};
		p1 = 32000000L;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"white","white","white"};
		p1 = 99000000000L;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// An electronics manufacturer has called you in to make a program to decode resistor color codes.  You are given a String[] code containing three elements corresponding to the first three color bands on a resistor.  Return the # of Ohms the resistor represents.
	// The first two bands of resistors represent the value, while the third is a multiplier, as shown in the following chart:
	// 
	// Color:      Value:       Multiplier:
	// 
	// black         0                   1
	// brown         1                  10
	// red           2                 100
	// orange        3               1,000
	// yellow        4              10,000
	// green         5             100,000
	// blue          6           1,000,000
	// violet        7          10,000,000
	// grey          8         100,000,000
	// white         9       1,000,000,000
	// 
	// For example if you are given { "yellow", "violet", "red" }, you would return 4700.
	// 
	// DEFINITION
	// Class:ColorCode
	// Method:getOhms
	// Parameters:String[]
	// Returns:long
	// Method signature:long getOhms(String[] code)
	// 
	// 
	// NOTES
	// -Actual resistors can have a 4th and even a 5th band representing the tolerance, and the amount the value might change in 1,000 hours of use, respectively, but for our purposes we will only deal with the first three bands.
	// 
	// 
	// CONSTRAINTS
	// -code consists of 3 elements each containing one of the color words above, all in lower case.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// { "yellow", "violet", "red" }
	// 
	// Returns: 4700
	// 
	// The example from the problem statement.
	// 
	// 1)
	// { "orange", "red", "blue" }
	// 
	// Returns: 32000000
	// 
	// 2)
	// { "white", "white", "white" }
	// 
	// Returns: 99000000000
	// 
	// The maximum possible.
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
