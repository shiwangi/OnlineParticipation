public class PrettyPrintingProduct
{
	public String prettyPrint(int A, int B)
	{
        int five=0,two=0;long pro=1; int num;
		for(int i=A;i<=B;i++)
        {
            num=i;
            if(i%5==0){
                five= (int) (Math.log(num)/Math.log(5));
                num=num/(int)Math.pow(5,five);
            }
          if(i%2==0){
                two=(int) (Math.log(num)/Math.log(2));;
                num=num/(int)Math.pow(2,two);
            }
            //System.out.println(i);
            pro*=num;
        }

        int power;
        if(five>two)
        {
                pro*=Math.pow(5,(five-two));
            power=two;
        }
        else if(five<two)
        {
            pro*=Math.pow(2,(two-five));
            power=five;
        }
        else
            power=two;

        if(pro>9999999999l)
        {
            long a= (long)pro/(long) Math.pow(10,numdig(pro)-5);
            int b= (int) (pro%100000);
            return Long.toString(a)+"..."+Integer.toString(b)+" * 10^"+Integer.toString(power);
        }
        else
            return Long.toString(pro)+" * 10^"+Integer.toString(power);
	}
	 int numdig(long num)
     {
         int c=0;
         while (num!=0)
         {
             num/=10;
             c++;
         }
         return c;
     }
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		PrettyPrintingProduct obj;
		String answer;
		obj = new PrettyPrintingProduct();
		long startTime = System.currentTimeMillis();
		answer = obj.prettyPrint(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		String p2;
		
		// ----- test 0 -----
		p0 = 1;
		p1 = 10;
		p2 = "36288 * 10^2";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 7;
		p1 = 7;
		p2 = "7 * 10^0";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 211;
		p1 = 214;
		p2 = "2038974024 * 10^0";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 411;
		p1 = 414;
		p2 = "28952...24024 * 10^0";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 412;
		p1 = 415;
		p2 = "2923450236 * 10^1";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 47;
		p1 = 4700;
		p2 = "14806...28928 * 10^1163";
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = 1;
		p1 = 19;
		p2 = "12164...08832 * 10^3";
		all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 7 -----
		p0 = 13;
		p1 = 25;
		p2 = "32382...26624 * 10^4";
		all_right = KawigiEdit_RunTest(7, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// You will be given two positive ints A and B.
	// 
	// 
	// 
	// Let C be the product of all integers between A and B, inclusive.
	// 
	// 
	// 
	// The number C has a unique representation of the form C = D * 10^E, where D and E are non-negative integers and the last digit of D
	// is non-zero.
	// 
	// 
	// 
	// Write a method that will return the value of C formatted as a String of the form "D * 10^E" (quotes for clarity only).
	// Substitute the actual values of D and E into the output. If D has more than 10 digits, only output the first five and the last five digits of D, and separate
	// them by three periods.
	// 
	// 
	// DEFINITION
	// Class:PrettyPrintingProduct
	// Method:prettyPrint
	// Parameters:int, int
	// Returns:String
	// Method signature:String prettyPrint(int A, int B)
	// 
	// 
	// NOTES
	// -The purpose of the last constraint is to disallow inputs where precision problems could arise.
	// 
	// 
	// CONSTRAINTS
	// -A will be between 1 and 1,000,000, inclusive.
	// -B will be between A and 1,000,000, inclusive.
	// -If C has more than 10 digits, then the sixth most significant digit of C will be neither 0 nor 9.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 1
	// 10
	// 
	// Returns: "36288 * 10^2"
	// 
	// 1 * 2 * ... * 10 = 3628800 = 36288 * 10^2
	// 
	// 1)
	// 7
	// 7
	// 
	// Returns: "7 * 10^0"
	// 
	// The product of all numbers between 7 and 7, inclusive, is obviously 7.
	// 
	// 2)
	// 211
	// 214
	// 
	// Returns: "2038974024 * 10^0"
	// 
	// For this input D has 10 digits.
	// 
	// 3)
	// 411
	// 414
	// 
	// Returns: "28952...24024 * 10^0"
	// 
	// For this input D has 11 digits. Note that we output three dots even if just one digit is missing in the output.
	// 
	// 4)
	// 412
	// 415
	// 
	// Returns: "2923450236 * 10^1"
	// 
	// The actual value of C is larger than in the previous example. However, C ends in a zero and therefore D only has 10 digits.
	// 
	// 5)
	// 47
	// 4700
	// 
	// Returns: "14806...28928 * 10^1163"
	// 
	// 
	// 
	// 6)
	// 1
	// 19
	// 
	// Returns: "12164...08832 * 10^3"
	// 
	// Note that the last five digits of D can start with a zero.
	// 
	// 7)
	// 13
	// 25
	// 
	// Returns: "32382...26624 * 10^4"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
