public class Segments {
    public String intersection(int[] s1, int[] s2) {
        int x = 0, y = 0;int y1,x1,y2,x2;
        if (s1[0] != s1[2] && s1[1] == s1[3])
        {y1=s1[1]; x++;}
        else
        { y++;x1=s1[0];}
        if (s2[0] != s2[2] && s2[1] == s1[3])
        { x++;y2=s2[1];}
        else
            { y++;x2=s2[0];}

         return "ji";

    }


    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, String p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}");
        System.out.println("]");
        Segments obj;
        String answer;
        obj = new Segments();
        long startTime = System.currentTimeMillis();
        answer = obj.intersection(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + "\"" + p2 + "\"");
        }
        System.out.println("Your answer:");
        System.out.println("\t" + "\"" + answer + "\"");
        if (hasAnswer) {
            res = answer.equals(p2);
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int[] p1;
        String p2;

        // ----- test 0 -----
        p0 = new int[]{0, 0, 0, 1};
        p1 = new int[]{1, 0, 1, 1};
        p2 = "NO";
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[]{0, 0, 0, 1};
        p1 = new int[]{0, 1, 0, 2};
        p2 = "POINT";
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[]{0, -1, 0, 1};
        p1 = new int[]{-1, 0, 1, 0};
        p2 = "POINT";
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[]{0, 0, 2, 0};
        p1 = new int[]{1, 0, 10, 0};
        p2 = "SEGMENT";
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[]{5, 5, 5, 5};
        p1 = new int[]{6, 6, 6, 6};
        p2 = "NO";
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = new int[]{10, 0, -10, 0};
        p1 = new int[]{5, 0, -5, 0};
        p2 = "SEGMENT";
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    //
    //   You are given two line segments on the plane. Each segment is parallel to either the X axis or the Y axis. Your task is to figure out how the segments intersect and return one of the following strings:
    //
    //   "NO", if the segments do not intersect
    //   "POINT", if the segments' intersection forms a point
    //   "SEGMENT", if the segments' intersection forms a line segment
    //
    //
    //
    //   The segments will be given as two int[]s s1 and s2. Each of them will contain four integers x1, y1, x2, y2 (in that order) where (x1, y1), (x2, y2) are segment endpoints.
    //
    //
    // DEFINITION
    // Class:Segments
    // Method:intersection
    // Parameters:int[], int[]
    // Returns:String
    // Method signature:String intersection(int[] s1, int[] s2)
    //
    //
    // CONSTRAINTS
    // -       Each of s1 and s2 will contain exactly four elements
    // -       All integers in s1 and s2 will be between -1000 and 1000, inclusive
    // -       Each segment will be parallel to either the X axis or the Y axis
    //
    //
    // EXAMPLES
    //
    // 0)
    // {0, 0, 0, 1}
    // {1, 0, 1, 1}
    //
    // Returns: "NO"
    //
    // The segments are parallel and there is no intersection.
    //
    // 1)
    // {0, 0, 0, 1}
    // {0, 1, 0, 2}
    //
    // Returns: "POINT"
    //
    // The segments are located on the same line and have only one common point (0,1).
    //
    // 2)
    // {0, -1, 0, 1}
    // {-1, 0, 1, 0}
    //
    // Returns: "POINT"
    //
    // The segments intersect at point (0,0).
    //
    // 3)
    // {0, 0, 2, 0}
    // {1, 0, 10, 0}
    //
    // Returns: "SEGMENT"
    //
    // The segments have a common line segment from (1,0) to (2,0).
    //
    // 4)
    // {5, 5, 5, 5}
    // {6, 6, 6, 6}
    //
    // Returns: "NO"
    //
    // These are two different points.
    //
    // 5)
    // {10, 0, -10, 0}
    // {5, 0, -5, 0}
    //
    // Returns: "SEGMENT"
    //
    // The segments have a common line segment from (-5,0) to (5,0).
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
