public class KDoubleSubstrings {
    public int howMuch(String[] str, int k) {
        String s = "";
        for (int i = 0; i < str.length; i++) {
            s += str[i];
        }
        //System.out.println(s);
        int ans = 0;
        int l = s.length();
        char c;
        int start = 0, count = 0;
        int p = 0;
        int times = 1;

        if(l%2!=0)
        {
            times++;
            l--;
        }
        int  j = start + l / 2;

            for (int i = start;i < start + l / 2 ; i++,j++) {

                if (s.charAt(i)!= s.charAt(j))
                    count++;
                if (count > k) {
                    count = 0;
                    p++;
                    if (p == times) {
                        p = 0;
                        i = -1;
                        j =  l / 2-2;
                        l -= 2;
                        times += 2;
                        start = 0;
                    } else {
                        i = start ;

                        j = start + l / 2;
                        start++;
                    }
                    continue;
                }
            if(i==start-1+l/2)
            {
            p++;
            if (count <= k)
            {
                System.out.println(start+" at length" +l);
                ans++;}

                if (p == times) {
                    p = 0;
                    i = -1;
                    j =  l / 2-2;
                    l -= 2;
                    times += 2;
                    start = 0;
                } else {
                    i = start ;
                    j = start + l / 2;
                    start++;
                }
                count = 0;

            }
        }
        return ans;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, boolean hasAnswer, int p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}" + "," + p1);
        System.out.println("]");
        KDoubleSubstrings obj;
        int answer;
        obj = new KDoubleSubstrings();
        long startTime = System.currentTimeMillis();
        answer = obj.howMuch(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        int p1;
        int p2;

        // ----- test 0 -----
        p0 = new String[]{"aa"};
        p1 = 0;
        p2 = 1;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[]{"aaaa"};
        p1 = 0;
        p2 = 4;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[]{"contest", "kontest"};
        p1 = 1;
        p2 = 14;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new String[]{"abacaba", "d", "abacaba"};
        p1 = 1;
        p2 = 34;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new String[]{"areyouready"};
        p1 = 2;
        p2 = 18;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    //
    // A k-double string is a non-empty string consisting of two equal length halves, where the first half differs from the second half at no more than k positions. For example, "contestcontest", "oopoop" and "aa" are 0-double strings. "contestkontest" is a 1-double string, and "poorpork", "artbat", and "yesyep" are 2-double strings. Obviously, all 0-double strings are also 1-double strings, all 1-double strings are also 2-double strings, etc.
    //
    //
    // You will be given a String[] str and an int k. Concatenate the elements of str to form one long string, and return the number of k-double substrings contained in that string.
    //
    //
    // If the same string exists in several different positions, count it as many times as it exists. Also, k-double substrings can overlap. See the examples for more details.
    //
    //
    // DEFINITION
    // Class:KDoubleSubstrings
    // Method:howMuch
    // Parameters:String[], int
    // Returns:int
    // Method signature:int howMuch(String[] str, int k)
    //
    //
    // CONSTRAINTS
    // -str will contain between 1 and 5 elements, inclusive.
    // -Each element of str will contain between 1 and 50 characters, inclusive.
    // -Each element of str will contain only lowercase letters ('a'-'z').
    // -k will be between 0 and 100, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {"aa"}
    // 0
    //
    // Returns: 1
    //
    // "aa" is the only 0-double substring.
    //
    // 1)
    // {"aaaa"}
    // 0
    //
    // Returns: 4
    //
    // There are four substrings of even length and all of them are 0-double strings.
    //
    // 2)
    // {"contest", "kontest"}
    // 1
    //
    // Returns: 14
    //
    // Each pair of consecutive letters form a 1-double substring and the whole string form one more 1-double substring.
    //
    // 3)
    // {"abacaba", "d", "abacaba"}
    // 1
    //
    // Returns: 34
    //
    //
    //
    // 4)
    // {"areyouready"}
    // 2
    //
    // Returns: 18
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
