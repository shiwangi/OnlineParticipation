public class SwappingDigits
{
	public String minNumber(String num)
	{
		int []a=new int[num.length()];String s="";  int min=10000;
        int l=num.length();   int st=-1,flag=0; char c;int key=-1;
        while(true)
        {
            if(st==l-1)
                break;
            st++;
            c=num.charAt(st);
            min=c;
        for(int i=st+1;i<l;i++){
            if(num.charAt(i)<=min && num.charAt(i)!=c ){
                if((st==0  && num.charAt(i)!='0' || st!=0)) {
                 key=i;
                flag=1;
                min=num.charAt(i);
            }   }
        }
            if(flag==1)
                break;
        }
        //Arrays.sort(a);
        for(int i=0;i<l;i++)
        {
            if(i==st)
                s+=(char)min;
            else if(i==key)
                s+=num.charAt(st);
            else
            s+=num.charAt(i);
        }
        return s;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		SwappingDigits obj;
		String answer;
		obj = new SwappingDigits();
		long startTime = System.currentTimeMillis();
		answer = obj.minNumber(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		String p1;
		
		// ----- test 0 -----
		p0 = "1002005";
		p1 = "1000025";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "30112222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222";
		p1 = "10132222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "5491727514";
		p1 = "1491727554";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "10234";
		p1 = "10234";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "93218910471211292416";
		p1 = "13218910471211292496";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Given is a String num. This String contains the digits of a (possibly large) positive integer. For example, num="1147" represents the integer 1147. The String num will not have any leading zeros.
	// 
	// You are allowed to swap one pair of digits in the given number. In other words, you may choose a pair of distinct indices i and j, and swap the characters num[i] and num[j]. Note that you may also leave the original number unchanged. The new String must again describe a valid positive integer, i.e., it must not have any leading zeros.
	// 
	// Find and return the String that represents the smallest possible integer that can be obtained.
	// 
	// DEFINITION
	// Class:SwappingDigits
	// Method:minNumber
	// Parameters:String
	// Returns:String
	// Method signature:String minNumber(String num)
	// 
	// 
	// CONSTRAINTS
	// -The length of num will be between 2 and 50, inclusive.
	// -Each character of num will be between '0' and '9', inclusive.
	// -The first character of num will not be '0'.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "596"
	// 
	// Returns: "569"
	// 
	// You can swap num[1] and num[2] to get the minimum integer.
	// 
	// 1)
	// "93561"
	// 
	// Returns: "13569"
	// 
	// 
	// 
	// 2)
	// "5491727514"
	// 
	// Returns: "1491727554"
	// 
	// 
	// 
	// 3)
	// "10234"
	// 
	// Returns: "10234"
	// 
	// You can leave the original String num unchanged. Note that the result must not contain leading zeros.
	// 
	// 4)
	// "93218910471211292416"
	// 
	// Returns: "13218910471211292496"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
