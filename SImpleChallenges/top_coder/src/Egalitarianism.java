import java.util.Arrays;

public class Egalitarianism
{
	public int maxDifference(String[] isFriend, int d)
	{
		int rows=isFriend.length;
        int cols=isFriend[0].length();
        int not_friend[]=new int[rows];
        int a[][]=new int[rows][cols];  int friend=0; int max=Integer.MIN_VALUE;
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {
                friend=0;
               a[i][j]=(isFriend[i].charAt(j)=='N' && isFriend[j].charAt(i)=='N')?0:1;
                if(i!=j)
                    if(a[i][j]!=1)
                    {
                        friend++;
                    }
            }
            not_friend[i]=friend;
        }
        Arrays.sort(not_friend);int ans=0;
        if(not_friend[rows-1]==rows-1)
            return -1;
        int []flag=new int[rows];
        for(int i=rows-1;i>=0;i--)
        {
            if(flag[i]!=1)
            {
            flag[i]=1;
                ans++;
            for(int j=0;j<rows;j++)
            {
               if(a[i][j]==1)
                   flag[j]=1;
            }
            }
        }
        return ans*d;

        }


	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		Egalitarianism obj;
		int answer;
		obj = new Egalitarianism();
		long startTime = System.currentTimeMillis();
		answer = obj.maxDifference(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new String[]{"NYN","YNY","NYN"};
		p1 = 10;
		p2 = 20;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"NN","NN"};
		p1 = 1;
		p2 = -1;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"NNYNNN","NNYNNN","YYNYNN","NNYNYY","NNNYNN","NNNYNN"};
		p1 = 1000;
		p2 = 3000;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"NNYN","NNNY","YNNN","NYNN"};
		p1 = 584;
		p2 = -1;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"NYNYYYN","YNNYYYN","NNNNYNN","YYNNYYN","YYYYNNN","YYNYNNY","NNNNNYN"};
		p1 = 5;
		p2 = 20;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new String[]{"NYYNNNNYYYYNNNN","YNNNYNNNNNNYYNN","YNNYNYNNNNYNNNN","NNYNNYNNNNNNNNN","NYNNNNYNNYNNNNN","NNYYNNYNNYNNNYN","NNNNYYNNYNNNNNN","YNNNNNNNNNYNNNN","YNNNNNYNNNNNYNN","YNNNYYNNNNNNNNY","YNYNNNNYNNNNNNN","NYNNNNNNNNNNNNY","NYNNNNNNYNNNNYN","NNNNNYNNNNNNYNN","NNNNNNNNNYNYNNN"};
		p1 = 747;
		p2 = 2988;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = new String[]{"NY","YN"};
		p1 = 0;
		p2 = 0;
		all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// A kingdom has n citizens. Each one has some amount of money, a number of dollars denoted by a non-negative integer.
	// 
	// Citizens are numbered from 0 to n-1. Some citizens have friends. Their friendship network is described by a String[] called isFriend, such that if isFriend[i][j] == 'Y', the citizens numbered i and j are friends, and if isFriend[i][j] == 'N', these citizens are not friends.
	// 
	// The king decrees the following:
	// 
	// Each citizen's amount of money must be within d dollars of the amount of money belonging to any of his friends. In other words, a citizen with x dollars must not have any friends with less than x-d dollars or more than x+d dollars.
	// 
	// Given the number of citizens and their friendship network, what is the greatest possible money difference between any two people (not necessarily friends) in this kingdom? If there is a finite answer, return it. Otherwise, return -1.
	// 
	// DEFINITION
	// Class:Egalitarianism
	// Method:maxDifference
	// Parameters:String[], int
	// Returns:int
	// Method signature:int maxDifference(String[] isFriend, int d)
	// 
	// 
	// CONSTRAINTS
	// -n will be between 2 and 50, inclusive.
	// -d will be between 0 and 1,000, inclusive.
	// -isFriend will contain exactly n elements.
	// -Each element of isFriend will contain exactly n characters, each of which is either 'Y' or 'N'.
	// -For any i, isFriend[i][i] = 'N'.
	// -For any i and j, isFriend[i][j] = isFriend[j][i].
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {"NYN",
	//  "YNY",
	//  "NYN"}
	// 10
	// 
	// Returns: 20
	// 
	// The kingdom has three citizens. Citizens 0 and 1 are friends. Also, citizens 1 and 2 are friends. The greatest possible money difference between any two citizens is $20, as in the following configuration: citizen 0 has $100; citizen 1 has $110; citizen 2 has $120.
	// 
	// 1)
	// {"NN",
	//  "NN"}
	// 1
	// 
	// Returns: -1
	// 
	// Since citizens 0 and 1 are not friends, there are no constraints between them.
	// 
	// 2)
	// {"NNYNNN",
	//  "NNYNNN",
	//  "YYNYNN",
	//  "NNYNYY",
	//  "NNNYNN",
	//  "NNNYNN"}
	// 1000
	// 
	// Returns: 3000
	// 
	// 
	// 
	// 3)
	// {"NNYN",
	//  "NNNY",
	//  "YNNN",
	//  "NYNN"}
	// 584
	// 
	// Returns: -1
	// 
	// 
	// 
	// 4)
	// {"NYNYYYN",
	//  "YNNYYYN",
	//  "NNNNYNN",
	//  "YYNNYYN",
	//  "YYYYNNN",
	//  "YYNYNNY",
	//  "NNNNNYN"}
	// 5
	// 
	// Returns: 20
	// 
	// 
	// 
	// 5)
	// {"NYYNNNNYYYYNNNN",
	//  "YNNNYNNNNNNYYNN",
	//  "YNNYNYNNNNYNNNN",
	//  "NNYNNYNNNNNNNNN",
	//  "NYNNNNYNNYNNNNN",
	//  "NNYYNNYNNYNNNYN",
	//  "NNNNYYNNYNNNNNN",
	//  "YNNNNNNNNNYNNNN",
	//  "YNNNNNYNNNNNYNN",
	//  "YNNNYYNNNNNNNNY",
	//  "YNYNNNNYNNNNNNN",
	//  "NYNNNNNNNNNNNNY",
	//  "NYNNNNNNYNNNNYN",
	//  "NNNNNYNNNNNNYNN",
	//  "NNNNNNNNNYNYNNN"}
	// 
	// 747
	// 
	// Returns: 2988
	// 
	// 
	// 
	// 6)
	// {"NY",
	//  "YN"}
	// 0
	// 
	// Returns: 0
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
