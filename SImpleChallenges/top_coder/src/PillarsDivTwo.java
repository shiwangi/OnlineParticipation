import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PillarsDivTwo
{
    public static double calc(int w, int h)
    {
        return  Math.sqrt(w*w+h*h);
    }
	public double maximalLength(int[] height, int w)
	{
        int l=height.length;
        double ans[][]=new double[l][101];
        for(int k=0;k<=l;k++)
        {
            ans[0][k]=0;
        }
        for(int i=1;i<l;i++)
        {
           for(int j=1;j<=height[i];j++)
           {
               for(int k=1;k<=height[i-1];k++)
               {
              ans[i][j]=Math.max(ans[i-1][k]+calc(w,k-j),ans[i][j]) ;
           }
        }
        }
            double a=0;
            for(int k=1;k<=height[l-1];k++)
            {
                a=Math.max(ans[l-1][k],a) ;
            }
            return a;

    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, double p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		PillarsDivTwo obj;
		double answer;
		obj = new PillarsDivTwo();
		long startTime = System.currentTimeMillis();
		answer = obj.maximalLength(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == answer && Math.abs(p2 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p2));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		double p2;
		
		// ----- test 0 -----
		p0 = new int[]{3,3,3};
		p1 = 2;
		p2 = 5.656854249492381D;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
        p0 = new int[]{100,2,100,2,100};
        p1 = 4;
        p2 = 396.32310051270036D;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ----- test 1 -----
		p0 = new int[]{92, 98, 43, 46, 30, 10, 72, 1, 25, 43, 19, 44, 14, 38, 43, 94, 70, 25, 86, 59, 99, 51, 4, 68, 100, 4, 57, 92, 12, 95, 43, 61, 92, 5, 94, 15, 4, 13, 78, 42, 31, 100, 59, 74, 64, 17, 51, 20, 36, 9};


		p1 = 23;
		p2 = 3227.74775802847D;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----

		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{2,1,1,2};
		p1 = 1;
		p2 = 3.82842712474619D;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// On a horizontal line, there are N uniformly spaced vertical pillars.
	// The pillars are numbered 0 through N-1, in order.
	// For each i, the distance between the bottoms of pillars i and i+1 is exactly w.
	// For each i, the height of pillar i (0-based index) is an integer between 1 and heights[i], inclusive.
	// We want to take a single piece of rope and use it to join the top ends of all pillars, in order.
	// (Once in place, the rope will have the shape of a polyline consisting of N-1 segments.)
	// What is the shortest length of rope that is guaranteed to be sufficient, regardless of the actual pillar heights?
	// 
	// You are given the int[] heights and the int w.
	// Compute and return the answer to the above question.
	// In other words, find a sequence of pillar heights (within the given constraints) for which the length of the rope we need is maximized, and return that maximum.
	// 
	// DEFINITION
	// Class:PillarsDivTwo
	// Method:maximalLength
	// Parameters:int[], int
	// Returns:double
	// Method signature:double maximalLength(int[] height, int w)
	// 
	// 
	// NOTES
	// -Your return value must have a relative or an absolute error of less than 1e-9.
	// 
	// 
	// CONSTRAINTS
	// -heights will contain between 1 and 50 elements, inclusive.
	// -Each element of heights will be between 1 and 100, inclusive.
	// -w will be between 1 and 100, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {3,3,3}
	// 2
	// 
	// Returns: 5.656854249492381
	// 
	// 
	// 
	// 1)
	// {1,1,1,1}
	// 100
	// 
	// Returns: 300.0
	// 
	// 
	// 
	// 2)
	// {100,2,100,2,100}
	// 4
	// 
	// Returns: 396.32310051270036
	// 
	// We will need the most rope if columns 0, 2, and 4 have height 100 each, and columns 1 and 3 have height 1 each.
	// 
	// 3)
	// {2,1,1,2}
	// 1
	// 
	// Returns: 3.82842712474619
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
