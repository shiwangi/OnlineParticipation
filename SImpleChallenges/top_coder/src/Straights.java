public class Straights {
    public int howMany(int[] hand, int k) {
        int count = 0, c = 0, m = 1, traverse;
        int sum = 0;
        //hand[hand.length]=0;
        for (int i = 0; i < hand.length; i++) {
            if (hand[i] == 0 || i==hand.length-1) {
                if(i==hand.length-1){
                    if( hand[i]!=0){
                        count++;
                    }
                        i++;
                }

                if (count >= k) {
                    traverse = i;
                    while (c <= count - k ) {
                        for (int l = 0; l <= k - 1; l++) {

                            m = m*hand[traverse - count + l];
                        }
                        c++;
                        traverse++;
                        sum += m;
                        m=1;
                    }
                }
                count = 0;
                c = 0;
                m = 1;
                continue;
            } else
                count++;
        }
        return sum;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + p1);
        System.out.println("]");
        Straights obj;
        int answer;
        obj = new Straights();
        long startTime = System.currentTimeMillis();
        answer = obj.howMany(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int p1;
        int p2;

        // ----- test 0 -----
        p0 = new int[]{0, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        p1 = 2;
        p2 = 5;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        p1 = 5;
        p2 = 9;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[]{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4};
        p1 = 13;
        p2 = 67108864;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[]{4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4};
        p1 = 2;
        p2 = 0;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[]{1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1};
        p1 = 1;
        p2 = 31;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // You are playing a game of cards in which the number of straights, i.e., sets of consecutive-valued cards, determines the strength of your hand. You will be given a int[] hand, where the i-th element of hand is the number of cards of value i in your hand. You should return the number of straights of length k. For example, suppose you have the hand:
    //
    // 2 of spades
    // 2 of diamonds
    // 2 of clubs
    // 3 of clubs
    // 4 of hearts
    // 4 of clubs
    //
    // You would be given hand = { 0, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 }. The number of two-card straights is 5:
    //
    // 2 of spades, 3 of clubs
    // 2 of diamonds, 3 of clubs
    // 2 of clubs, 3 of clubs
    // 3 of clubs, 4 of hearts
    // 3 of clubs, 4 of clubs
    //
    //
    // DEFINITION
    // Class:Straights
    // Method:howMany
    // Parameters:int[], int
    // Returns:int
    // Method signature:int howMany(int[] hand, int k)
    //
    //
    // NOTES
    // -Straights do not wrap around: if hand is {1,0,0,0,0,0,0,0,0,0,0,0,1}, you have no straights of length 2.
    //
    //
    // CONSTRAINTS
    // -hand will contain exactly 13 elements.
    // -Each element of hand will be between 0 and 4 inclusive.
    // -k will be between 1 and 13 inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {0,3,1,2,0,0,0,0,0,0,0,0,0}
    // 2
    //
    // Returns: 5
    //
    // The example given.
    //
    // 1)
    // {1,1,1,1,1,1,1,1,1,1,1,1,1}
    // 5
    //
    // Returns: 9
    //
    // Say hand[0] references Aces. There are 9 ways to make a straight of length 5: Ace-Five up to Nine-King.
    //
    // 2)
    // {4,4,4,4,4,4,4,4,4,4,4,4,4}
    // 13
    //
    // Returns: 67108864
    //
    // 3)
    // {4,0,4,0,4,0,4,0,4,0,4,0,4}
    // 2
    //
    // Returns: 0
    //
    // Straights do not wrap around; we have no straights here.
    //
    // 4)
    // {1,2,3,4,1,2,3,4,1,2,3,4,1}
    // 1
    //
    // Returns: 31
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
