import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PrefixFreeSubsets
{
    ArrayList<String>  a;
	public long cantPrefFreeSubsets(String[] words)
	{
        int l=words.length;
        Arrays.sort(words);
       a=new ArrayList<String>();
        for(int i=0;i<l;i++)
        {
            a.add(words[i]);
        }
        int count[]=new int[l];
        outer:for(int i=0;i<a.size();i++)
        {

            for(int j=i+1;j<a.size();j++)
            {
                if(!isPrefix(a.get(i), a.get(j)))
                {
                    count[i]++;
                }
            }
        }


        return (long) Math.pow(2,a.size());
	}


    private boolean isPrefix(String s, String s1) {

        if(s1.indexOf(s)==0)
            return true;
        else
            return false;
    }

    // BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		PrefixFreeSubsets obj;
		long answer;
		obj = new PrefixFreeSubsets();
		long startTime = System.currentTimeMillis();
		answer = obj.cantPrefFreeSubsets(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		long p1;
		
		// ----- test 0 -----
		p0 = new String[]{"hello","hell","hi"};
		p1 = 6L;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"a","b","c","d"};
		p1 = 16L;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"a","ab","abc","abcd","abcde","abcdef"};
		p1 = 7L;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"a","b","aa","ab","ba","bb"};
		p1 = 25L;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// A prefix-free set is a set of words in which no element is a prefix of another element in the set. For example {"hello"} , {"hello", "goodbye", "giant", "hi"} and the empty set are examples of prefix-free sets. On the other hand, {"hello","hell"} and {"great","gig","g"} are not prefix-free.
	// 
	// You will be given a String[] words containing a set of words, and you must return the number of subsets of words that are prefix-free. Note that both the empty set and the entire set count as subsets.
	// 
	// 
	// DEFINITION
	// Class:PrefixFreeSubsets
	// Method:cantPrefFreeSubsets
	// Parameters:String[]
	// Returns:long
	// Method signature:long cantPrefFreeSubsets(String[] words)
	// 
	// 
	// NOTES
	// -A prefix of a string is the result of erasing zero or more characters from the right end of that string.
	// 
	// 
	// CONSTRAINTS
	// -words will contain between 1 and 50 elements, inclusive.
	// -Each element of words will contain between 1 and 50 characters, inclusive.
	// -Each character of each element of words will be a lowercase letter ('a'-'z').
	// -No two elements of words will be equal.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {"hello","hell","hi"}
	// 
	// Returns: 6
	// 
	// There are 23=8 possible subsets. Only the subsets containing both "hello" and "hell" will not be prefix-free. There are 2 of those (one with "hi" and one without), and therefore, there are 8-2=6 prefix-free subsets.
	// 
	// 1)
	// {"a","b","c","d"}
	// 
	// Returns: 16
	// 
	// All subsets are prefix-free.
	// 
	// 2)
	// {"a","ab","abc","abcd","abcde","abcdef"}
	// 
	// Returns: 7
	// 
	// Only subsets with one or less elements are prefix-free.
	// 
	// 3)
	// {"a","b","aa","ab","ba","bb"}
	// 
	// Returns: 25
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
