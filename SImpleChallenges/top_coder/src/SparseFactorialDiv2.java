import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class SparseFactorialDiv2
{
	public long getCount(long lo, long hi, long divisor)
	{
		    return 0;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, long p0, long p1, long p2, boolean hasAnswer, long p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
		System.out.println("]");
		SparseFactorialDiv2 obj;
		long answer;
		obj = new SparseFactorialDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.getCount(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		long p0;
		long p1;
		long p2;
		long p3;
		
		// ----- test 0 -----
		p0 = 4L;
		p1 = 8L;
		p2 = 3L;
		p3 = 3L;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 9L;
		p1 = 11L;
		p2 = 7L;
		p3 = 1L;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 1L;
		p1 = 1000000000000L;
		p2 = 2L;
		p3 = 999999999999L;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 16L;
		p1 = 26L;
		p2 = 11L;
		p3 = 4L;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 10000L;
		p1 = 20000L;
		p2 = 997L;
		p3 = 1211L;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 123456789L;
		p1 = 987654321L;
		p2 = 71L;
		p3 = 438184668L;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// For an integer n, let F(n) = (n - 0^2) * (n - 1^2) * (n - 2^2) * (n - 3^2) * ... * (n - k^2), where k is the largest integer such that n - k^2 > 0.
	// You are given three longs lo, hi and divisor.
	// It is guaranteed that divisor will be a prime number.
	// Compute and return the number of integers n between lo and hi, inclusive, such that F(n) is divisible by divisor.
	// 
	// DEFINITION
	// Class:SparseFactorialDiv2
	// Method:getCount
	// Parameters:long, long, long
	// Returns:long
	// Method signature:long getCount(long lo, long hi, long divisor)
	// 
	// 
	// CONSTRAINTS
	// -lo will be between 1 and 1,000,000,000,000, inclusive.
	// -hi will be between lo and 1,000,000,000,000, inclusive.
	// -divisor will be between 2 and 997, inclusive.
	// -divisor will be a prime number.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 4
	// 8
	// 3
	// 
	// Returns: 3
	// 
	// The value of F(n) for each n = 4, 5, ..., 8 is as follows. 
	// 
	// F(4) = 4*3   = 12
	// F(5) = 5*4*1 = 20
	// F(6) = 6*5*2 = 60
	// F(7) = 7*6*3 = 126
	// F(8) = 8*7*4 = 224
	// 
	// Thus, F(4), F(6), F(7) are divisible by 3 but F(5) and F(8) are not.
	// 
	// 1)
	// 9
	// 11
	// 7
	// 
	// Returns: 1
	// 
	// 
	// F(9)  = 9*8*5     = 360
	// F(10) = 10*9*6*1  = 540
	// F(11) = 11*10*7*2 = 1540
	// 
	// Only F(11) is divisible by 7.
	// 
	// 2)
	// 1
	// 1000000000000
	// 2
	// 
	// Returns: 999999999999
	// 
	// Watch out for the overflow. 
	// 
	// 3)
	// 16
	// 26
	// 11
	// 
	// Returns: 4
	// 
	// 
	// 
	// 4)
	// 10000
	// 20000
	// 997
	// 
	// Returns: 1211
	// 
	// 
	// 
	// 5)
	// 123456789
	// 987654321
	// 71
	// 
	// Returns: 438184668
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
