import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class WinterAndMandarins
{
	public int getNumber(int[] bags, int K)
	{
		     Arrays.sort(bags);
        int res=Integer.MAX_VALUE;
        for(int i=0;i<=bags.length-K;i++)
        {
            res=Math.min(res,bags[i+K-1]-bags[i]) ;
        }
        return res;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		WinterAndMandarins obj;
		int answer;
		obj = new WinterAndMandarins();
		long startTime = System.currentTimeMillis();
		answer = obj.getNumber(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new int[]{10,20,30};
		p1 = 2;
		p2 = 10;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{4,7,4};
		p1 = 3;
		p2 = 3;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{4,1,2,3};
		p1 = 3;
		p2 = 2;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{5,4,6,1,9,4,2,7,5,6};
		p1 = 4;
		p2 = 1;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{47,1000000000,1,74};
		p1 = 2;
		p2 = 27;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// It's winter time!
	// Time to eat a lot of mandarins with your friends.
	// 
	// 
	// 
	// 
	// You have several bags with mandarins.
	// You are given an int[] bags.
	// For each i, the i-th element of bags represents the number of mandarins in the i-th bag.
	// You are also given an int K.
	// You want to choose exactly K bags and distribute them among you and your friends.
	// To be as fair as possible, you want to minimize the difference between the chosen bag with most mandarins and the chosen bag with fewest mandarins.
	// Return the smallest difference that can be achieved.
	// 
	// 
	// DEFINITION
	// Class:WinterAndMandarins
	// Method:getNumber
	// Parameters:int[], int
	// Returns:int
	// Method signature:int getNumber(int[] bags, int K)
	// 
	// 
	// CONSTRAINTS
	// -bags will contain between 2 and 50 elements, inclusive.
	// -Each element of bags will be between 1 and 1,000,000,000, inclusive.
	// -K will be between 2 and N, inclusive, where N is the number of elements in bags.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {10, 20, 30}
	// 2
	// 
	// Returns: 10
	// 
	// There are three ways to choose two bags in this case: {10, 20}, {20, 30}, and {10, 30}.
	// Both in the first case and in the second case the difference between the largest and the smallest number of mandarins is 10.
	// In the third case the difference is 20.
	// Thus, the smallest possible difference is 10.
	// 
	// 1)
	// {4, 7, 4}
	// 3
	// 
	// Returns: 3
	// 
	// 
	// 
	// 2)
	// {4, 1, 2, 3}
	// 3
	// 
	// Returns: 2
	// 
	// 
	// 
	// 3)
	// {5, 4, 6, 1, 9, 4, 2, 7, 5, 6}
	// 4
	// 
	// Returns: 1
	// 
	// 
	// 
	// 4)
	// {47, 1000000000, 1, 74}
	// 2
	// 
	// Returns: 27
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
