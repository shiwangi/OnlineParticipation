import java.util.ArrayList;
import java.util.Arrays;

public class WolfInZooDivTwo
{
    int l[];int r[];
    int c; int n;
    class Range implements Comparable<Range>{
        int left;int right;
        Range(int l,int r)
        {
            left=l;right=r;
        }

        @Override
        public int compareTo(Range o) {
            return right-o.right;  //To change body of implemented methods use File | Settings | File Templates.
        }
    }
	public int count(int N, String[] L, String[] R)
	{
		//int res=solve(N);
        c=0;   n=N;
        for(int i=0;i<L.length;i+=1)
        {
            for(int j=0;j<L[i].length();j++){
                if(L[i].charAt(j)!=' ') {
                    l[c]=L[i].charAt(j)-'0';
                    c++;
                }
            }

        }
        c=0;
        for(int i=0;i<R.length;i+=1)
        {
            for(int j=0;j<R[i].length();j++){
                if(R[i].charAt(j)!=' ') {
                    r[c]=R[i].charAt(j)-'0';
                    c++;
                }
            }

        }
        Range []a=new Range[c];
        for(int i=0;i<c;i++)
        {
               a[i]=(new Range(l[i],r[i]));
        }

        int res=solve(-1,0);
        return 0;
	}

    private int solve(int last_1, int pos) {

        if(pos==n-1)
                return 1;
       return 0;
    }

    // BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, String[] p1, String[] p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p1[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p2[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		WolfInZooDivTwo obj;
		int answer;
		obj = new WolfInZooDivTwo();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		String[] p1;
		String[] p2;
		int p3;
		
		// ----- test 0 -----
		p0 = 5;
		p1 = new String[]{"0 1"};
		p2 = new String[]{"2 4"};
		p3 = 27;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 10;
		p1 = new String[]{"0 4 2 7"};
		p2 = new String[]{"3 9 5 9"};
		p3 = 798;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 100;
		p1 = new String[]{"0 2 2 7 10 1","3 16 22 30 33 38"," 42 44 49 51 57 60 62"," 65 69 72 74 77 7","8 81 84 88 91 93 96"};
		p2 = new String[]{"41 5 13 22 12 13 ","33 41 80 47 40 ","4","8 96 57 66 ","80 60 71 79"," 70 77 ","99"," 83 85 93 88 89 97 97 98"};
		p3 = 250671525;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 3;
		p1 = new String[]{"1"};
		p2 = new String[]{"2"};
		p3 = 6;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Mr. Pasuterukun is walking along a straight road.
	// He is cautious, because he has heard that there may be some wolves on the road.
	// 
	// 
	// The road consists of N sections.
	// The sections are numbered 0 through N-1, in order.
	// Each section of the road contains at most one wolf.
	// 
	// 
	// You have M additional pieces of information about the positions of the wolves.
	// Each piece of information is an interval of the road that contains at least one wolf.
	// More precisely, for each i between 0 and M-1, inclusive, you are given two integers left[i] and right[i] such that the sections with numbers in the range from left[i] to right[i], inclusive, contain at least one wolf in total.
	// 
	// 
	// You are given two String[]s L and R.
	// The concatenation of all elements of L will be a single space separated list containing the integers left[0] through left[M-1].
	// R contains all the integers right[i] in the same format.
	// 
	// 
	// Return the number of ways in which wolves can be distributed in the sections of the road, modulo 1,000,000,007.
	// 
	// DEFINITION
	// Class:WolfInZooDivTwo
	// Method:count
	// Parameters:int, String[], String[]
	// Returns:int
	// Method signature:int count(int N, String[] L, String[] R)
	// 
	// 
	// CONSTRAINTS
	// -N will be between 1 and 300, inclusive.
	// -L and R will contain between 1 and 50 elements, inclusive.
	// -Each element of L and R will contain between 1 and 50 characters, inclusive.
	// -Each character in L and R will be a digit ('0'-'9') or a space (' ').
	// -M will be between 1 and 300, inclusive.
	// -The concatenation of all elements of L will be a single space separated list of M integers. The integers will be between 0 and N-1, inclusive, and they will be given without unnecessary leading zeroes.
	// -The concatenation of all elements of R will be a single space separated list of M integers. The integers will be between 0 and N-1, inclusive, and they will be given without unnecessary leading zeroes.
	// -For each i, the i-th integer in L will be smaller than or equal to the i-th integer in R.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 5
	// {"0 1"}
	// {"2 4"}
	// 
	// Returns: 27
	// 
	// There is at least one wolf on the sections 0 through 2, and at least one wolf on the sections 1 through 4.
	// 
	// 1)
	// 10
	// {"0 4 2 7"}
	// {"3 9 5 9"}
	// 
	// Returns: 798
	// 
	// 
	// 
	// 2)
	// 100
	// {"0 2 2 7 10 1","3 16 22 30 33 38"," 42 44 49 51 57 60 62"," 65 69 72 74 77 7","8 81 84 88 91 93 96"}
	// {"41 5 13 22 12 13 ","33 41 80 47 40 ","4","8 96 57 66 ","80 60 71 79"," 70 77 ","99"," 83 85 93 88 89 97 97 98"}
	// 
	// Returns: 250671525
	// 
	// You must first concatenate the elements of L and only then split it into integers. The same holds for R.
	// 
	// 3)
	// 3
	// {"1"}
	// {"2"}
	// 
	// Returns: 6
	// 
	// The following picture shows all possible patterns.
	// 
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
