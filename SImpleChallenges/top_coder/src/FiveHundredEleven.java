import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class FiveHundredEleven {
    int l;
    int dp[][];

    public String theWinner(int[] cards) {
        l = cards.length;
        dp = new int[512][l + 1];
        for (int i = 0; i <= 511; i++) {
            Arrays.fill(dp[i], -1);
        }


        return (solve(0, cards, 0) > 0) ? "Fox Ciel" : "Toastman";
    }

    private int solve(int memory, int[] cards, int played) {
        if (played == l) {
            dp[memory][played] = 0;
            return 0;
        }
        if (dp[memory][played] != -1)
            return dp[memory][played];
        int usefulcards=0;
        for (int i = 0; i < l; i++) {

            if ((memory | cards[i]) != memory) //not played
            {
                usefulcards++;
                if ((cards[i] | memory) != 511 && solve(cards[i] | memory, cards, played + 1) == 0) {
                    dp[memory][played] = 1;
                    return 1;
                }
            }

        }
        if ((l - played)-usefulcards > 0) {
            dp[memory][played] = (solve(memory, cards, played + 1) == 0) ? 1 : 0;
            return dp[memory][played];
        }
        dp[memory][played] = 0;
        return 0;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, String p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}");
        System.out.println("]");
        FiveHundredEleven obj;
        String answer;
        obj = new FiveHundredEleven();
        long startTime = System.currentTimeMillis();
        answer = obj.theWinner(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + "\"" + p1 + "\"");
        }
        System.out.println("Your answer:");
        System.out.println("\t" + "\"" + answer + "\"");
        if (hasAnswer) {
            res = answer.equals(p1);
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        String p1;

        // ----- test 0 -----
        p0 = new int[]{3, 5, 7, 9, 510};
        p1 = "Fox Ciel";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[]{0, 0, 0, 0};
        p1 = "Toastman";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[]{511};
        p1 = "Toastman";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[]{5, 58, 192, 256};
        p1 = "Fox Ciel";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Fox Ciel and Toastman are playing a game.
    //
    //
    // The game uses a memory and N cards. Initially the value of the memory is set to zero. You are given a int[] cards containing exactly N elements. cards[i] is the number written on the i-th card.
    //
    //
    // Ciel and Toastman take alternate turns, and Ciel plays first. In each turn, the player chooses a card and removes the card from the game (this card can't be used later). If the chosen card contains x and the value of the memory is y, the value of the memory is changed to (x | y). The '|' symbol stands for bitwise OR (see notes for clarification). If a player can't make a move (because there are no cards left), or if after a player's move the memory becomes 511, this player loses.
    //
    //
    // Determine the winner when both players play optimally. If Fox Ciel wins, return "Fox Ciel" (quotes for clarity). If Toastman wins, return "Toastman" (quotes for clarity).
    //
    //
    // DEFINITION
    // Class:FiveHundredEleven
    // Method:theWinner
    // Parameters:int[]
    // Returns:String
    // Method signature:String theWinner(int[] cards)
    //
    //
    // NOTES
    // -If a and b are single bits then a | b is defined as max(a, b). For two integers, A and B, in order to calculate A | B, they need to be represented in binary: A = (an...a1)2, B = (bn...b1)2 (if the lengths of their representations are different, the shorter one is prepended with the necessary number of leading zeroes). Then A | B = C = (cn...c1)2, where ci = ai | bi. For example, 10 | 3 = (1010)2 | (0011)2 = (1011)2 = 11.
    //
    //
    // CONSTRAINTS
    // -cards will contain between 1 and 50 elements, inclusive.
    // -Each element of cards will be between 0 and 511, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {3, 5, 7, 9, 510}
    //
    // Returns: "Fox Ciel"
    //
    // If Fox Ciel chooses 510 in her first turn, the value of the memory after Toastman's turn becomes 511 regardless of his choice.
    //
    // 1)
    // {0, 0, 0, 0}
    //
    // Returns: "Toastman"
    //
    // The value of the memory never becomes 511. After each player chooses 2 cards, there are no cards left and Fox Ciel loses.
    //
    // 2)
    // {511}
    //
    // Returns: "Toastman"
    //
    // After Fox Ciel chooses the only card in her first turn, the value of the memory becomes 511 and Fox Ciel loses.
    //
    // 3)
    // {5, 58, 192, 256}
    //
    // Returns: "Fox Ciel"
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
