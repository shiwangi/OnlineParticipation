import java.util.ArrayList;

public class DeckRearranging
{
	public String rearrange(String deck, int[] above)
	{
        ArrayList<Character> a=new ArrayList<Character>();  String s="";
        for(int i=0;i<deck.length();i++)
        {
            a.add(above[i],deck.charAt(i));
        }
        for(int i=0;i<deck.length();i++)
        {
        s+= a.get(i) ;
        }
        return s;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, int[] p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		DeckRearranging obj;
		String answer;
		obj = new DeckRearranging();
		long startTime = System.currentTimeMillis();
		answer = obj.rearrange(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		int[] p1;
		String p2;
		
		// ----- test 0 -----
		p0 = "BRBRR";
		p1 = new int[]{0,0,1,0,3};
		p2 = "RRBRB";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "RRRRRR";
		p1 = new int[]{0,1,2,0,1,3};
		p2 = "RRRRRR";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "RBRRBRBB";
		p1 = new int[]{0,1,2,3,4,5,6,7};
		p2 = "RBRRBRBB";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "RBRRBRBB";
		p1 = new int[]{0,0,0,0,0,0,0,0};
		p2 = "BBRBRRBR";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "RBRRBRBB";
		p1 = new int[]{0,1,0,0,4,0,6,7};
		p2 = "RRRRBBBB";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// We have a deck of cards. Each of the cards is either black or red. We will use the character B to represent a black card and the character R for a red card.
	// By listing the cards from top to bottom of the deck we get a String deck.
	// 
	// 
	// 
	// We now want to insert all the cards into a new deck. 
	// Initially, the new deck is empty. We will now process the cards in the old deck from top to bottom.
	// When processing the card that corresponds to character i of deck, take it from the old deck and insert it into the new deck in such a way that exactly above[i] cards are above it after the insertion.
	// 
	// 
	// 
	// Write a method that takes the String deck and int[] above, and returns the new deck encoded as a String in the same way as deck.
	// 
	// 
	// 
	// DEFINITION
	// Class:DeckRearranging
	// Method:rearrange
	// Parameters:String, int[]
	// Returns:String
	// Method signature:String rearrange(String deck, int[] above)
	// 
	// 
	// CONSTRAINTS
	// -deck will contain between 1 and 50 characters, inclusive.
	// -Each character in deck will be either 'B' or 'R' (uppercase letter B or R).
	// -The number of elements in above will be equal to the number of characters in deck.
	// -For each i, element i in above will be between 0 and i, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "BRBRR"
	// {0, 0, 1, 0, 3}
	// 
	// Returns: "RRBRB"
	// 
	// 
	// The order of cards in the old deck, top to bottom, is: B, R, B, R, R.
	// This is the order in which we will process them. 
	// 
	// 
	// Below we list the new deck, top to bottom, after each of the insertions. 
	// The most recently inserted card is given in uppercase, the other cards are in lowercase.
	// 
	// 
	// B
	// Rb
	// rBb
	// Rrbb
	// rrbRb
	// 
	// Therefore the new deck is RRBRB.
	// 
	// 1)
	// "RRRRRR"
	// {0,1,2,0,1,3}
	// 
	// Returns: "RRRRRR"
	// 
	// No matter how you rearrange a deck with 6 red cards, you will always get a deck with 6 red cards.
	// 
	// 2)
	// "RBRRBRBB"
	// {0,1,2,3,4,5,6,7}
	// 
	// Returns: "RBRRBRBB"
	// 
	// In this example each card is placed at the bottom of the new deck. The result is the same deck as the old one.
	// 
	// 3)
	// "RBRRBRBB"
	// {0,0,0,0,0,0,0,0}
	// 
	// Returns: "BBRBRRBR"
	// 
	// In this example, each card is placed on the top of the new deck. The result is the old deck turned upside down.
	// 
	// 4)
	// "RBRRBRBB"
	// {0,1,0,0,4,0,6,7}
	// 
	// Returns: "RRRRBBBB"
	// 
	// In this example, we place each red card on the top, and each black card on the bottom. The result is a deck with all red cards on the top.
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
