public class RoundAboutCircle
{
	public int maxScore(int N)
	{
        int flag[]=new int[N+1];int j,rem,sum,count=0,maxm=0;
        for(int i=1;i<=N;)
        {
            j=i  ;sum=0;
            flag[i]=1;
             while(j!=0)
             {
                 rem=j%10;
                 sum+=rem;
                 j=j/10;
             }
              i=(i+sum) %(N+1);
            if(flag[i]==1)
                break;
            else
                count++;
        }

        return count;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		RoundAboutCircle obj;
		int answer;
		obj = new RoundAboutCircle();
		long startTime = System.currentTimeMillis();
		answer = obj.maxScore(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		
		// ----- test 0 -----
		p0 = 4;
		p1 = 3;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 5;
		p1 = 4;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 17;
		p1 = 11;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 566;
		p1 = 176;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// N cells are located around a circle. Cells are numbered 1 through N in the clockwise direction.
	// Initially, you can place a token into any one of these cells.
	// In each turn, you look at the number of the cell containing the token and you calculate s, the sum of the digits in that number. You then move the token s cells clockwise.
	// This process continues until you move the token into a cell that already contained the token before. Your score is the number of cells that were visited by the token at least once during the process (including the initial cell).
	// Given N, return the maximal possible score you can get.
	// 
	// DEFINITION
	// Class:RoundAboutCircle
	// Method:maxScore
	// Parameters:int
	// Returns:int
	// Method signature:int maxScore(int N)
	// 
	// 
	// CONSTRAINTS
	// -N will be between 1 and 200000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 4
	// 
	// Returns: 3
	// 
	// The list of possible moves looks like this:
	// 1->2
	// 2->4
	// 3->2
	// 4->4
	// 
	// You can only visit 3 out of 4 cells, and there are two ways to do so: 1->2->4->4 and 3->2->4->4.
	// 
	// 1)
	// 5
	// 
	// Returns: 4
	// 
	// If you start on cell 5, the process will terminate after the first move.
	// 
	// Otherwise, the token will travel along the loop 1->2->4->3->1 until the entire loop is visited, thus making your score equal to 4.
	// 
	// 2)
	// 17
	// 
	// Returns: 11
	// 
	// The longest path of the token is 5->10->11->13->17->8->16->6->12->15->4->8.
	// 
	// 3)
	// 566
	// 
	// Returns: 176
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
