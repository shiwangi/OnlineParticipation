import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class SkiResorts
{
    int l,m;int a[][];
           int weight[][];
    Stack<Integer> stack;
    int visited[];

	public long minCost(String[] road, int[] altitude)
	{
        l = road.length;
         stack=new Stack<Integer>();
        m = road[0].length();
        a = new int[l][m];
        visited=new int[l];
        weight=new int[l][m];
        for (int i = 0; i < l; i++) {
            for (int j = 0; j < m; j++) {
                a[i][j] = (road[i].charAt(j)=='Y')?1:0;
                if(a[i][j]==1)
                weight[i][j]=(altitude[i]-altitude[j])>=0?0:-altitude[i]+altitude[j];
                else
                    weight[i][j]=Integer.MAX_VALUE;
            }
        }
        visited[0]=1;
        long res=solve(0,l-1);
        if(res>1000000001)
            return  -1;
        return res;
    }

    private long solve(int start, int end) {
        if(start==end)
            return 0;

        long res=Long.MAX_VALUE;
        for (int j = 0; j < m; j++) {
                if (visited[j] != 1 ) {
                    visited[j] = 1;
                    res=Math.min(res,weight[start][j]+solve(j,l-1));
                    visited[j] = 0;
                }
            }

          return res;
        }


    // BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int[] p1, boolean hasAnswer, long p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SkiResorts obj;
		long answer;
		obj = new SkiResorts();
		long startTime = System.currentTimeMillis();
		answer = obj.minCost(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int[] p1;
		long p2;
		
		// ----- test 0 -----
		p0 = new String[]{"NYN","YNY","NYN"};
		p1 = new int[]{30,20,10};
		p2 = 0L;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"NY","YN"};
		p1 = new int[]{10,20};
		p2 = 10L;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"NYN","YNN","NNN"};
		p1 = new int[]{573,573,573};
		p2 = -1L;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"NNYNNYYYNN","NNNNYNYNNN","YNNNNYYNNN","NNNNNNYNYY","NYNNNNNNYY","YNYNNNNYNN","YYYYNNNYNN","YNNNNYYNNN","NNNYYNNNNN","NNNYYNNNNN"};
		p1 = new int[]{7,4,13,2,8,1,8,15,5,15};
		p2 = 12L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Fox Ciel is the owner of a ski resort. The ski resort has N places numbered 0 through N-1. There are some bidirectional roads between pairs of places. You are given a String[] roads. If the j-th character of the i-th element of roads is 'Y', there is a bidirectional road that connects place i and place j. If it is 'N', there's no road between them. You are also given a int[] altitude. The i-th element of altitude is the altitude of the place i.
	// 
	// 
	// You can go directly from the place i to the place j by skiing if there is a bidirectional road between them and the altitude of the place i is higher than or equal to the altitude of the place j. Ciel wants to reconstruct the ski resort so that place N-1 is reachable (not necessarily directly) from place 0 by skiing. In the reconstruction, Ciel can change the altitude of some places. The cost of changing the altitude of a place from x to y is |x - y| units of money, where || denotes the absolute value.
	// 
	// 
	// Return the minimal cost required for the reconstruction. If it is impossible to reach place N-1 from place 0 even after the reconstruction, return -1.
	// 
	// DEFINITION
	// Class:SkiResorts
	// Method:minCost
	// Parameters:String[], int[]
	// Returns:long
	// Method signature:long minCost(String[] road, int[] altitude)
	// 
	// 
	// CONSTRAINTS
	// -road will contain between 2 and 50 elements, inclusive.
	// -Each element of road will contain exactly N characters, where N is the number of elements of road.
	// -Each character in road will be either 'Y' or 'N'.
	// -For each valid i, the i-th character of the i-th element of road will be 'N'.
	// -For each valid pair (i, j), the i-th character of the j-th element of road and the j-th character of the i-th element of road will be equal.
	// -altitude will contain exactly N elements.
	// -Each element of altitude will be between 0 and 1,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {"NYN",
	//  "YNY",
	//  "NYN"}
	// {30, 20, 10}
	// 
	// Returns: 0
	// 
	// It is possible to reach place 2 from place 0 even without the reconstruction by following the path (place 0) -> (place 1) -> (place 2).
	// 
	// 1)
	// {"NY",
	//  "YN"}
	// {10, 20}
	// 
	// Returns: 10
	// 
	// For example, Ciel can change the altitude of both places to 15. The cost is |10 - 15| + |20 - 15| = 10.
	// 
	// 2)
	// {"NYN",
	//  "YNN",
	//  "NNN"}
	// {573, 573, 573}
	// 
	// Returns: -1
	// 
	// Place 2 is not reachable from place 0.
	// 
	// 3)
	// {"NNYNNYYYNN",
	//  "NNNNYNYNNN",
	//  "YNNNNYYNNN",
	//  "NNNNNNYNYY",
	//  "NYNNNNNNYY",
	//  "YNYNNNNYNN",
	//  "YYYYNNNYNN",
	//  "YNNNNYYNNN",
	//  "NNNYYNNNNN",
	//  "NNNYYNNNNN"}
	// {7, 4, 13, 2, 8, 1, 8, 15, 5, 15}
	// 
	// Returns: 12
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
