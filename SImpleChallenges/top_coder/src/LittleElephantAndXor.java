import java.util.*;


public class LittleElephantAndXor {
    String a,b,c;
    long[][][][] cache=new long[2][2][2][32];

    public long solve(int stateA,int stateB,int stateC,int p)
    {

        if(p==32)
            return 1;
        if(cache[stateA][stateB][stateC][p]!=-1)
            return  cache[stateA][stateB][stateC][p];
        int limA=(stateA==1)?1:a.charAt(p)-'0';
        int limB=(stateB==1)?1:b.charAt(p)-'0';
        int ch;long res=0;

        for(int i=0;i<=limA;i++)
        {
            for(int j=0;j<=limB;j++)
            {
                ch=i^j;
                 if(ch==0|| stateC==1 || c.charAt(p)=='1')
                res+=solve(Math.max(stateA,a.charAt(p)-'0'-i),Math.max(stateB,b.charAt(p)-'0'-j),Math.max(stateC,(c.charAt(p)-'0'-ch)),p+1);


            }
        }
        return cache[stateA][stateB][stateC][p]=res;
    }
    public long getNumber(int A, int B, int C) {
         a=addSpace(Integer.toBinaryString(A));
         b=addSpace(Integer.toBinaryString(B));
         c=addSpace(Integer.toBinaryString(C));
        for(int i=0;i<2;i++)
        {
            for(int j=0;j<2;j++)
            {
                for(int k=0;k<2;k++)
                    Arrays.fill(cache[i][j][k],-1);
            }
        }
        return solve(0,0,0,0);

    }
    public String addSpace(String s)
    {
        while (s.length()<32)
            s="0"+s;
        return s;
    }


    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, boolean hasAnswer, long p3) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
        System.out.println("]");
        LittleElephantAndXor obj;
        long answer;
        obj = new LittleElephantAndXor();
        long startTime = System.currentTimeMillis();
        answer = obj.getNumber(p0, p1, p2);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p3);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p3;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int p0;
        int p1;
        int p2;
        long p3;

        // ----- test 0 -----
        p0 = 2;
        p1 = 2;
        p2 = 1;
        p3 = 5L;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 4;
        p1 = 7;
        p2 = 3;
        p3 = 20L;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 10;
        p1 = 10;
        p2 = 5;
        p3 = 57L;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 774;
        p1 = 477;
        p2 = 447;
        p3 = 214144L;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = 1000000000;
        p1 = 1000000000;
        p2 = 500000000;
        p3 = 468566946385621507L;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    //
    // Little Elephant from the Zoo of Lviv likes integers.
    //
    //
    //
    //
    // You are given three ints A, B and C. Return the number of ordered pairs (X,Y) of integers such that 0 <= X <= A, 0 <= Y <= B, and the value (X XOR Y) is less than or equal to C.
    //
    //
    // DEFINITION
    // Class:LittleElephantAndXor
    // Method:getNumber
    // Parameters:int, int, int
    // Returns:long
    // Method signature:long getNumber(int A, int B, int C)
    //
    //
    // NOTES
    // -XOR (exclusive or) is a binary operation, performed on two numbers in binary notation. First, the shorter number is prepended with leading zeroes until both numbers have the same number of digits (in binary). Then, the result is calculated as follows: for each bit where the numbers differ the result has 1 in its binary representation. It has 0 in all other positions.
    // -For example 42 XOR 7 is performed as follows. First, the numbers are converted to binary: 42 is 101010 and 7 is 111. Then the shorter number is prepended with leading zeros until both numbers have the same number of digits. This means 7 becomes 000111. Then 101010 XOR 000111 = 101101 (the result has ones only in the positions where the two numbers differ). Then the result can be converted back to decimal notation. In this case 101101 = 45, so 42 XOR 7 = 45.
    //
    //
    // CONSTRAINTS
    // -A, B and C will each be between 1 and 1,000,000,000 (109), inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // 2
    // 2
    // 1
    //
    // Returns: 5
    //
    // There are 9 possible pairs in this case:
    //
    // 0 XOR 0 = 0
    // 0 XOR 1 = 1
    // 0 XOR 2 = 2
    // 1 XOR 0 = 1
    // 1 XOR 1 = 0
    // 1 XOR 2 = 3
    // 2 XOR 0 = 2
    // 2 XOR 1 = 3
    // 2 XOR 2 = 0
    //
    // Among them, only 5 have XOR less than or equal to 1. Note that (0,1) and (1,0) are two different pairs.
    //
    // 1)
    // 4
    // 7
    // 3
    //
    // Returns: 20
    //
    //
    //
    // 2)
    // 10
    // 10
    // 5
    //
    // Returns: 57
    //
    //
    //
    // 3)
    // 774
    // 477
    // 447
    //
    // Returns: 214144
    //
    //
    //
    // 4)
    // 1000000000
    // 1000000000
    // 500000000
    //
    // Returns: 468566946385621507
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
