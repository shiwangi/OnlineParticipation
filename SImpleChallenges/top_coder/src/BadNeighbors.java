public class BadNeighbors
{
	public int maxDonations(int[] donations)
	{
        if(donations.length==2)
            return (Math.max(donations[0],donations[1]));
       return Math.max(solve(donations,0,donations.length-2),solve(donations,1,donations.length-1)) ;
	}
	  int solve(int []donations,int start,int end)
      {
          if(start==end)
              return donations[start];
                      if(start>end-2)
                          return Math.max(donations[end],donations[end-1]);
          if(start>end-3)
              return Math.max(donations[end]+solve(donations,start,end-2),donations[end-1]);
        return( Math.max(donations[end]+solve(donations,start,end-2),donations[end-1]+solve(donations,start,end-3))) ;


      }

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		BadNeighbors obj;
		int answer;
		obj = new BadNeighbors();
		long startTime = System.currentTimeMillis();
		answer = obj.maxDonations(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new int[]{10,3,2,5,7,8};
		p1 = 19;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{11,15};
		p1 = 15;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{7,7,7,7,7,7,7};
		p1 = 21;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,2,3,4,5,1,2,3,4,5};
		p1 = 16;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{94,40,49,65,21,21,106,80,92,81,679,4,61,6,237,12,72,74,29,95,265,35,47,1,61,397,52,72,37,51,1,81,45,435,7,36,57,86,81,72};
		p1 = 2926;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// The old song declares "Go ahead and hate your neighbor", and the residents of
	// Onetinville have taken those words to heart.  Every resident hates his next-door 
	// neighbors on both sides.  Nobody is willing to live farther away from the town's
	// well than his neighbors, so the town has been arranged in a big circle around
	// the well.  Unfortunately, the town's well is in disrepair and needs to be restored.  You
	// have been hired to collect donations for the Save Our Well fund.
	// 
	// 
	// 
	// Each of the town's residents is willing to donate a certain amount, as specified in the int[]
	// donations, which is listed in clockwise order around the well.  However, nobody is willing to 
	// contribute to a fund to which his neighbor has also contributed.  Next-door neighbors are always listed
	// consecutively in donations, except that the first and last entries in donations are also
	// for next-door neighbors.  You must calculate and return the maximum amount of donations that can be collected.
	// 
	// 
	// 
	// DEFINITION
	// Class:BadNeighbors
	// Method:maxDonations
	// Parameters:int[]
	// Returns:int
	// Method signature:int maxDonations(int[] donations)
	// 
	// 
	// CONSTRAINTS
	// -donations contains between 2 and 40 elements, inclusive.
	// -Each element in donations is between 1 and 1000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	//  { 10, 3, 2, 5, 7, 8 }
	// 
	// Returns: 19
	// 
	// The maximum donation is 19, achieved by 10+2+7.  It would be better to take 10+5+8 except that
	// the 10 and 8 donations are from neighbors.
	// 
	// 1)
	// { 11, 15 }
	// 
	// Returns: 15
	// 
	// 2)
	// { 7, 7, 7, 7, 7, 7, 7 }
	// 
	// Returns: 21
	// 
	// 3)
	// { 1, 2, 3, 4, 5, 1, 2, 3, 4, 5 }
	// 
	// Returns: 16
	// 
	// 4)
	// { 94, 40, 49, 65, 21, 21, 106, 80, 92, 81, 679, 4, 61,  
	//   6, 237, 12, 72, 74, 29, 95, 265, 35, 47, 1, 61, 397,
	//   52, 72, 37, 51, 1, 81, 45, 435, 7, 36, 57, 86, 81, 72 }
	// 
	// Returns: 2926
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
