import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class RedIsGood
{
    double dp[][];
    //imp prob.
	public double getProfit(int R, int B)
	{
        dp=new double[2][B+1];
        if(R>0)
        dp[0][0]=R-1;


        for(int i=1;i<=R;i++)
        {
            if(i!=1)
            dp[0]=dp[1];
            dp[1][0]=i;
            solve(i,B);
        }
        return dp[1][B];
	}

    private double[] solve(int R, int B) {






        double x;

            for(int j=1;j<=B;j++)
            {
                // if((double)i/(double)(i+j) *  1+ (double)j/(double)(i+j) *-1>0)

              x=((double)R * ( dp[0][j]+1)+ (double)j *  (dp[1][j-1]-1))/(double)(R+j);
                dp[1][j]=(x<0)?0:x;
            }

        return dp[1]; //To change body of created methods use File | Settings | File Templates.
    }

    // BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, double p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		RedIsGood obj;
		double answer;
		obj = new RedIsGood();
		long startTime = System.currentTimeMillis();
		answer = obj.getProfit(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == answer && Math.abs(p2 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p2));
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		double p2;
		
		// ----- test 0 -----
		p0 = 0;
		p1 = 7;
		p2 = 0.0D;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 4;
		p1 = 0;
		p2 = 4.0D;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 5;
		p1 = 1;
		p2 = 4.166666666666667D;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 5000;
		p1 = 5000;
		p2 = 0.6666666666666666D;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 12;
		p1 = 4;
		p2 = 8.324175824175823D;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 11;
		p1 = 12;
		p2 = 1.075642825339958D;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// You have a deck that contains R red and B black cards.
	// 
	// 
	// 
	// You are playing the following game: You shuffle the deck, and then begin dealing the cards one by one.
	// For each red card you flip you get a dollar, and for each black card you flip you have to pay a dollar.
	// At any moment (including the beginning of the game) you are allowed to stop and keep the money you have.
	// 
	// 
	// 
	// Write a method that will take the ints R and B, and return the expected amount you will 
	// gain if you play this game optimally.
	// 
	// 
	// DEFINITION
	// Class:RedIsGood
	// Method:getProfit
	// Parameters:int, int
	// Returns:double
	// Method signature:double getProfit(int R, int B)
	// 
	// 
	// NOTES
	// -During the game, your balance may be negative.
	// -We assume that each permutation of the cards in the deck is equally likely.
	// -Your return value must have a relative or absolute error less than 1e-9.
	// 
	// 
	// CONSTRAINTS
	// -R will be between 0 and 5,000, inclusive.
	// -B will be between 0 and 5,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 0
	// 7
	// 
	// Returns: 0.0
	// 
	// If all cards are black, the best strategy is not to play at all.
	// 
	// 1)
	// 4
	// 0
	// 
	// Returns: 4.0
	// 
	// If all cards are red, the best strategy is to flip them all.
	// 
	// 2)
	// 5
	// 1
	// 
	// Returns: 4.166666666666667
	// 
	// The strategy "flip all cards" is guaranteed to earn $4. However, we can do better. If we flipped 5 cards and all of them are red, it makes no sense to flip the final, black card. Therefore if we play optimally the expected gain is more than $4.
	// 
	// 3)
	// 2
	// 2
	// 
	// Returns: 0.6666666666666666
	// 
	// An optimal strategy for this case: Flip the first card. If it is red, stop. If it is black, flip the second and the third card. If both are red, stop, otherwise flip the fourth card.
	// 
	// 4)
	// 12
	// 4
	// 
	// Returns: 8.324175824175823
	// 
	// This is a game I would surely like to play often.
	// 
	// 5)
	// 11
	// 12
	// 
	// Returns: 1.075642825339958
	// 
	// Surprisingly, sometimes there is a good strategy even if the number of red cards is smaller than the number of black cards.
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
