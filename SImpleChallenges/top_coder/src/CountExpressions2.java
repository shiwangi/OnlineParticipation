import java.util.ArrayList;

public class CountExpressions2
{
	public int calcExpressions(int x, int y, int val)
	{
	      ArrayList<Integer> a=new ArrayList<Integer>();  int res=0;
        a.add(x);a.add(x);a.add(y);a.add(y);
         res+=solve(a,val,0);

        ArrayList<Integer> ab=new ArrayList<Integer>();
        ab.add(x);ab.add(y);ab.add(x);ab.add(y);
        res+=solve(a,val,0);
       ab=new ArrayList<Integer>();
        ab.add(y);ab.add(y);ab.add(x);ab.add(y);
        res+=solve(a,val,0);
        ab=new ArrayList<Integer>();
        ab.add(y);ab.add(x);ab.add(x);ab.add(y);
        res+=solve(a,val,0);
        ab=new ArrayList<Integer>();
        ab.add(y);ab.add(x);ab.add(y);ab.add(x);
        res+=solve(a,val,0);
        ab=new ArrayList<Integer>();
        ab.add(x);ab.add(y);ab.add(y);ab.add(x);
        res+=solve(a,val,0);
        return res;
	}
    int solve(ArrayList<Integer> a, int val,int c)
    {
        int i=0;
        int num=a.get(0); a.remove(0);
        if(a.size()==0 && num==val)
            return 1;
        else if(a.size()==0)
            return 0;
       c= solve(a,val-num,c) ==1?c+1:c;
        c= solve(a,val+num,c) ==1?c+1:c;
        if(val%num==0)
            c= solve(a,val/num,c) ==1?c+1:c;
        return  c;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
		System.out.println("]");
		CountExpressions2 obj;
		int answer;
		obj = new CountExpressions2();
		long startTime = System.currentTimeMillis();
		answer = obj.calcExpressions(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = 7;
		p1 = 8;
		p2 = 16;
		p3 = 9;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = 5;
		p2 = 7;
		p3 = 5;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 99;
		p1 = 100;
		p2 = 98010000;
		p3 = 6;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = -99;
		p1 = 42;
		p2 = -1764;
		p3 = 2;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 100;
		p1 = -100;
		p2 = -100000000;
		p3 = 0;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 1;
		p1 = 2;
		p2 = 5;
		p3 = 17;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// 	You are helping your brother with his homework assignment.  His teacher gave him two distinct numbers x 
	// 	and y, and asked him to use those numbers to form as many different expressions as possible.  
	// 	Each expression must satisfy all of the following rules:
	// 
	// 	
	// 		The only allowed operators are '+', '-' and '*'.
	// 	
	// 	
	// 		x and y must each appear exactly twice.  No other numbers are allowed.
	// 	
	// 	
	// 		The result of the expression must be equal to val.
	// 	
	// 
	// 
	// 
	// 
	// 	In other words, each expression can be written in the form "a op1 b op2 c op3 d", where each of op1, op2 and op3 
	// 	is '+', '-' or '*', and among the numbers a, b, c and d, exactly two are equal to x and the other two are 
	// 	equal to y.  Please note that the unary minus is not allowed (see example 0).  Expressions are calculated from 
	// 	left to right, and there is no operator precedence.  For example, to calculate the result of 
	// 	"2 + 2 * 3 + 3", you would first calculate 2 + 2, then multiply the result by 3, and then add 3 to get 15.
	// 
	// 
	// 
	// 	Return the total number of different expressions that can be formed.  Two expressions are considered 
	// 	different if their string notations (as described in the previous paragraph) are different.  For example, 
	// 	the expressions "2 + 3 - 2 - 3", "2 - 2 + 3 - 3" and "2 - 3 - 2 + 3" are all different.
	// 
	// 
	// 
	// DEFINITION
	// Class:CountExpressions2
	// Method:calcExpressions
	// Parameters:int, int, int
	// Returns:int
	// Method signature:int calcExpressions(int x, int y, int val)
	// 
	// 
	// CONSTRAINTS
	// -x and y will each be between -100 and 100, inclusive.
	// -x and y will be different.
	// -val will be between -100000000 and 100000000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 7
	// 8
	// 16
	// 
	// Returns: 9
	// 
	// The possible expressions are:
	// 8 + 8 + 7 - 7
	// 8 + 7 + 8 - 7
	// 7 + 8 + 8 - 7
	// 8 + 8 - 7 + 7
	// 8 + 7 - 7 + 8
	// 7 + 8 - 7 + 8
	// 8 - 7 + 8 + 7
	// 8 - 7 + 7 + 8
	// 7 - 7 + 8 + 8
	// 
	// Please note that the unary minus is not allowed, so "-7 + 7 + 8 + 8" is not a valid expression.
	// 
	// 
	// 1)
	// 3
	// 5
	// 7
	// 
	// Returns: 5
	// 
	// The possible expressions are:
	// 3 * 5 - 3 - 5
	// 5 * 3 - 3 - 5
	// 3 * 5 - 5 - 3
	// 5 * 3 - 5 - 3
	// 5 - 3 * 5 - 3
	// 
	// 
	// 2)
	// 99
	// 100
	// 98010000
	// 
	// Returns: 6
	// 
	// 
	// 
	// 3)
	// -99
	// 42
	// -1764
	// 
	// Returns: 2
	// 
	// -99 - (-99) - 42 * 42
	// -99 - 42 - (-99) * 42
	// 
	// 
	// 4)
	// 100
	// -100
	// -100000000
	// 
	// Returns: 0
	// 
	// 
	// 
	// 5)
	// 1
	// 2
	// 5
	// 
	// Returns: 17
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
