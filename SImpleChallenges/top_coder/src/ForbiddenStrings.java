import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ForbiddenStrings
{
    class S implements Comparable<S>{
        String ss;int p;
        S(String h,int v)
        {
            ss=h;p=v;
        }

        @Override
        public int compareTo(S o) {
            if(ss.compareTo(o.ss)==0)
                if(p==o.p)
                    return 0;
                      else
                      return p-o.p;
            else
            return ss.compareTo(o.ss); //To change body of implemented methods use File | Settings | File Templates.
        }
    }
    int N; TreeMap<S,Long> t;
    private long solve(String s,int p)
    {
        if(t.containsKey(new S(s,p)))
        {
            return t.get(new S(s,p));
        }
        int l=s.length();
        if(p==N)
            return 1;
        long res=0;
          if(s.equals("AB"))
          {
              res=solve("BA",p+1)+ solve("BB",p+1)  ;
          }
        else if(s.equals("BC"))
        {
            res=solve("CB",p+1)+ solve("CC",p+1)  ;
        }
          else if(s.equals("AC"))
          {
              res=solve("CA",p+1)+ solve("CC",p+1)  ;
          }
          else if(s.equals("CA"))
          {
              res=solve("AC",p+1)+ solve("AA",p+1)  ;
          }
          else if(s.equals("CB"))
          {
              res=solve("BC",p+1)+ solve("BB",p+1)  ;
          }
        else if(s.equals("BA"))
        {
            res=solve("AB",p+1)+ solve("AA",p+1)  ;
        }

          else if(l==0 ||l==1)
        {
            res=solve(s+"A",p+1)+solve(s+"B",p+1)+solve(s+"C",p+1);
        }

        else{
              res=solve(s.substring(1)+"A",p+1)+solve(s.substring(1)+"B",p+1)+solve(s.substring(1)+"C",p+1);
          }
        t.put(new S(s,p),res);
        return res;
    }
	public long countNotForbidden(int n)
	{
		N=n;   t=new TreeMap<S, Long>();
        long res=solve("",0);
        return res;

	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		ForbiddenStrings obj;
		long answer;
		obj = new ForbiddenStrings();
		long startTime = System.currentTimeMillis();
		answer = obj.countNotForbidden(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		long p1;
		
		// ----- test 0 -----
		p0 = 30;
		p1 = 3L;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = 21L;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 4;
		p1 = 51L;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// A string of letters A, B, C is forbidden if there are three consecutive letters from which one is A, one is B, and one is C. For example, BAACAACCBAAA is forbidden, while AABBCCAABB is not.
	// 
	// Your task is to calculate how many such strings of length n are not forbidden.
	// 
	// 
	// DEFINITION
	// Class:ForbiddenStrings
	// Method:countNotForbidden
	// Parameters:int
	// Returns:long
	// Method signature:long countNotForbidden(int n)
	// 
	// 
	// CONSTRAINTS
	// -n will be between 1 and 30, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 2
	// 
	// Returns: 9
	// 
	// All 9 strings of length 2 are not forbidden.
	// 
	// 
	// 1)
	// 3
	// 
	// Returns: 21
	// 
	// There are 27 strings of length 3. Of these, 6 contain one occurrence of each letter. Those 6 strings are forbidden, so you should return 21.
	// 
	// 
	// 2)
	// 4
	// 
	// Returns: 51
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
