import java.util.ArrayList;
import java.util.Arrays;


public class SurveillanceSystem {
    public String getContainerInfo(String containers, int[] reports, int L) {
        int[] c = new int[containers.length()];
        for (int i = 0; i < containers.length(); i++) {
            if (containers.charAt(i) == 'X')
                c[i]++;
        }
        int[] sum = new int[c.length - L + 1];
        char[] soln = new char[c.length];
        Arrays.fill(soln, '-');
        for (int j = 0; j < L; j++) {

            sum[0] += c[j];
        }
        for (int i = L; i < c.length; i++)
            sum[i - L + 1] = sum[i - L] - c[i - L] + c[i];
        int coun = 0;
        ArrayList<Integer> rep = new ArrayList<Integer>();
        for (int k = 0; k < reports.length; k++) {
            rep.add(reports[k]);
        }

        for (int k = 0; k < rep.size(); k++) {
            ArrayList<Integer> sec = new ArrayList<Integer>();
            coun = 1;
            for (int i = 0; i < sum.length; i++)
                if (rep.get(k) == sum[i]) {
                    sec.add(i);
                }
            for (int i = k + 1; i < rep.size(); i++) {
                if (rep.get(i) == rep.get(k)) {
                    rep.remove(i);i--;
                    coun++;
                }
            }
            if (sec.size() > coun) {
                for (int x = 0; x < sec.size(); x++) {
                    for (int m = sec.get(x); m <= sec.get(x) + L - 1; m++) {
                        if(x!=sec.size()-1 && sec.get(x+1)==m)
                            continue;
                        else if(x==sec.size()-1 && m<=sec.get(x-1)+L-1)
                            soln[m]='+';

                        else if (soln[m] != '+')
                            soln[m] = '?';
                    }
                }
            } else if (sec.size() == coun) {
                for (int x = 0; x < sec.size(); x++) {
                    for (int m = sec.get(x); m <= sec.get(x) + L - 1; m++) {
                            soln[m] = '+';
                    }
                }
            }

        }


        String ans = "";
        for (int i = 0; i < soln.length; i++)
            ans += soln[i];
        return ans;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String p0, int[] p1, int p2, boolean hasAnswer, String p3) {
        System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}" + "," + p2);
        System.out.println("]");
        SurveillanceSystem obj;
        String answer;
        obj = new SurveillanceSystem();
        long startTime = System.currentTimeMillis();
        answer = obj.getContainerInfo(p0, p1, p2);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + "\"" + p3 + "\"");
        }
        System.out.println("Your answer:");
        System.out.println("\t" + "\"" + answer + "\"");
        if (hasAnswer) {
            res = answer.equals(p3);
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String p0;
        int[] p1;
        int p2;
        String p3;

        // ----- test 0 -----
        p0 = "-X--XX";
        p1 = new int[]{1, 2};
        p2 = 3;
        p3 = "??++++";
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = "-XXXXX-";
        p1 = new int[]{2};
        p2 = 3;
        p3 = "???-???";
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = "------X-XX-";
        p1 = new int[]{3, 0, 2, 0};
        p2 = 5;
        p3 = "++++++++++?";
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = "-XXXXX---X--";
        p1 = new int[]{2, 1, 0, 1};
        p2 = 3;
        p3 = "???-??++++??";
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = "-XX--X-XX-X-X--X---XX-X---XXXX-----X";
        p1 = new int[]{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3};
        p2 = 7;
        p3 = "???++++?++++++++++++++++++++??????--";
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // There is a long narrow storehouse.
    // The storehouse is divided into a sequence of N identical sectors, labeled 0 through N-1.
    // Each sector is large enough to contain a single container.
    // Currently, some sectors are empty and some sectors are filled by containers.
    // The storehouse also contains a surveillance system that is described below.
    //
    // We are going to break into the storehouse.
    // As a part of preparation for the heist, we already found out some information about the warehouse.
    // In particular, we know exactly how the containers are currently placed in the warehouse.
    // You are given a String containers consisting of N characters.
    // For each i, character i of containers is 'X' if sector i contains a container, and it is '-' if sector i is empty.
    //
    // We also discovered some information about the surveillance system.
    // The system consists of several hidden cameras.
    // You are given a int L with the following meaning:
    // Each of the cameras monitors exactly L consecutive sectors.
    // The segments of sectors monitored by different cameras might overlap, but no two cameras watch exactly the same segment.
    // (In other words, each sector may be monitored by multiple cameras, but each camera monitors a different set of consecutive sectors.)
    //
    // Finally, we know something about what the cameras currently see.
    // You are given a int[] reports.
    // Each element of reports corresponds to one of the cameras (in no particular order).
    // More precisely, reports[i] is the number of containers stored in the sectors monitored by the corresponding camera.
    //
    // It is guaranteed that all our information is correct and consistent.
    //
    // Your task is to use the provided information to deduce which sectors are monitored by at least one surveillance camera.
    // Return a String containing N characters.
    // For each i, character i of the return value should be one of '+', '?', and '-'.
    // Character '+' represents that sector i is certainly monitored by at least one camera.
    // Character '-' represents that sector i is certainly not monitored by any of the cameras.
    // Character '?' represents the remaining case: given the information we have, it is possible that sector i is monitored, but it is also possible that it is not monitored.
    //
    // DEFINITION
    // Class:SurveillanceSystem
    // Method:getContainerInfo
    // Parameters:String, int[], int
    // Returns:String
    // Method signature:String getContainerInfo(String containers, int[] reports, int L)
    //
    //
    // CONSTRAINTS
    // -containers will contain N elements, where N is between 1 and 50, inclusive.
    // -Each character in containers will be either 'X' or '-'.
    // -L will be between 1 and N, inclusive.
    // -reports will contain between 1 and N-L+1 elements, inclusive.
    // -Each element of reports will be between 0 and L, inclusive.
    // -The given information will be consistent.
    //
    //
    // EXAMPLES
    //
    // 0)
    // "-X--XX"
    // {1, 2}
    // 3
    //
    // Returns: "??++++"
    //
    // This storehouse has 6 sectors.
    // There are containers in sectors 1, 4, and 5.
    // There are two cameras: camera #0 monitors 1 container, and camera #1 monitors 2 containers.
    // Clearly, camera #1 must be watching sectors 3, 4, and 5.
    // Camera #0 may be watching sectors (0, 1, 2), (1, 2, 3), or (2, 3, 4).
    // Thus, camera #0 is surely monitoring sector 2.
    // Sectors 0 and 1 may or may not be monitored.
    //
    // 1)
    // "-XXXXX-"
    // {2}
    // 3
    //
    // Returns: "???-???"
    //
    // The camera is monitoring either the leftmost or the rightmost segment, thus the middle sector is surely not under surveillance.
    //
    // 2)
    // "------X-XX-"
    // {3, 0, 2, 0}
    // 5
    //
    // Returns: "++++++++++?"
    //
    // We can deduce that cameras #1 and #3 are watching segments (0, 1, 2, 3, 4) and (1, 2, 3, 4, 5). Camera #2 is monitoring the segment (4, 5, 6, 7, 8), since this is the only segment with two occupied sectors. Camera #0 is either watching (5, 6, 7, 8, 9) or (6, 7, 8, 9, 10), thus the rightmost sector might have slipped from the surveillance.
    //
    // 3)
    // "-XXXXX---X--"
    // {2, 1, 0, 1}
    // 3
    //
    // Returns: "???-??++++??"
    //
    //
    //
    // 4)
    // "-XX--X-XX-X-X--X---XX-X---XXXX-----X"
    // {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}
    // 7
    //
    // Returns: "???++++?++++++++++++++++++++??????--"
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
