import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ColorfulRoad
{
	public int getMin(String road)
	{
		        return 0;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		ColorfulRoad obj;
		int answer;
		obj = new ColorfulRoad();
		long startTime = System.currentTimeMillis();
		answer = obj.getMin(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		int p1;
		
		// ----- test 0 -----
		p0 = "RGGGB";
		p1 = 8;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "RGBRGBRGB";
		p1 = 8;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "RBBGGGRR";
		p1 = -1;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "RBRRBGGGBBBBR";
		p1 = 50;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "RG";
		p1 = 1;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = "RBRGBGBGGBGRGGG";
		p1 = 52;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// There is a one-dimensional road.
	// The road is separated into N consecutive parts.
	// The parts are numbered 0 through N-1, in order.
	// Ciel is going to walk from part 0 to part N-1.
	// 
	// 
	// Ciel also noticed that each part of the road has a color: either red, green, or blue.
	// Part 0 is red.
	// 
	// 
	// Ciel is going to perform a sequence of steps.
	// Each step must lead in the positive direction.
	// That is, if her current part is i, the next step will take her to one of the parts i+1 through N-1, inclusive.
	// Her steps can be arbitrarily long.
	// However, longer steps are harder: a step of length j costs j*j energy.
	// 
	// 
	// Additionally, Ciel wants to step on colors in a specific order: red, green, blue, red, green, blue, ...
	// That is, she starts on the red part 0, makes a step to a green part, from there to a blue part, and so on, always repeating red, green, and blue in a cycle.
	// Note that the final part N-1 also has some color and thus Ciel must reach it in a corresponding step.
	// 
	// 
	// You are given a String road containing N elements.
	// For each i, element i of road is the color of part i: 'R' represents red, 'G' green, and 'B' blue.
	// If Ciel can reach part N-1 in the way described above, return the smallest possible total cost of doing so.
	// Otherwise, return -1.
	// 
	// 
	// 
	// DEFINITION
	// Class:ColorfulRoad
	// Method:getMin
	// Parameters:String
	// Returns:int
	// Method signature:int getMin(String road)
	// 
	// 
	// CONSTRAINTS
	// -road will contain between 2 and 15 characters, inclusive.
	// -Each character of road will be either 'R' or 'G' or 'B'.
	// -The first character of road will be 'R'.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "RGGGB"
	// 
	// Returns: 8
	// 
	// The optimum solution is to step part 0 -> part 2 -> part 4.
	// The total cost is 2*2 + 2*2 = 8.
	// 
	// 1)
	// "RGBRGBRGB"
	// 
	// Returns: 8
	// 
	// The optimum solution is to make steps of length 1.
	// It costs 1*1 = 1 per each step, so the total cost is 8.
	// 
	// 2)
	// "RBBGGGRR"
	// 
	// Returns: -1
	// 
	// It is impossible to reach the destination.
	// 
	// 
	// 3)
	// "RBRRBGGGBBBBR"
	// 
	// Returns: 50
	// 
	// 
	// 
	// 4)
	// "RG"
	// 
	// Returns: 1
	// 
	// 
	// 
	// 5)
	// "RBRGBGBGGBGRGGG"
	// 
	// Returns: 52
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
